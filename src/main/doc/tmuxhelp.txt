文本三巨头：zsh、tmux 和 vim
参考:Linux终端杀手、程序员利器-Tmux

github .tmux 配置
快捷键总结比较详细
tmux 命令
配置步骤很详细
k-vim 作者的
原理

你可以随时退出或者进入任何一个Session。每个Session有若干个Window，每个Window又可以分成多个窗格（Pane）
Session可以完全恢复！但是关机就不可以了，不过你可以写脚本来恢复
tmux -> session -> window -> pane
一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）

安装 Tmux

apt-get install tmux
sudo port install tmux
sudo brew install tmux
sudo yum install tmux

其他系统直接安装 Tmux 的 tar 包，Tmux 依赖于 libevent 和 libevent-devel 包.
########
配置 Tmux 安装完 Tmux 默认没有配置文件，需手动生成。/etc/tmux.conf 全局文件，～/.tmux.conf 用户环境文件


# vim ~/.tmux.conf
set -g prefix ^g                        # <prefix> 激活控制台，(默认Ctrl+b)
unbind ^b                               # 解绑 Ctrl+b
set-option -g status-utf8 on            # 开启状态栏的UTF-8支持
# cp mode
set-window-option -g mode-keys vi       # 复制模式中的默认键盘布局使用 vi
bind h select-pane -L                   # h 等于向左移动光标
bind j select-pane -D                   # j 向下移动光标
bind k select-pane -U                   # k 向上移动光标
bind l select-pane -R                   # l 向右移动光标

tmux 默认使用的是Ctrl+b，之所以改成Ctrl+g是因为Ctrl+b在 Bash 环境里是向左移动光标. 现在 tmux 和 vim 操作一样了，复制时候也可以用 h、j、k、l 来移动光标。
使用 Tmux Tmux 完全依靠快捷键来使用它的功能，而刚才设置的Ctrl+g是这些功能的前提，例如打开一个时钟：Ctrl + g + t 按键的时候要先按Ctrl+g后松开Ctrl和g键后，快速按出t 打开 Tmux：
Ctrl+g 后松开在按 t 会在终端里出现一个数字时钟
说的是 tmux 的功能无非就是 Ctrl + g + 一些功能的键而已，所有的按键方式和上面的时钟例子一样。
获取 Tmux 帮助 按 Ctrl + g + ? （问号等于：Shift + /）会出现 Tmux 的帮助信息, 信息中 ‘bind-key’ 说的就是 Ctrl + g, 或者直接 man tmux。
命令

tmux new -s myname 可以指定Session名
[PREFIX-:] new -s 在tmux中创建一个会话
tmux attach-session -t myname 重新连接此会话
tmux attach
tmux attach -t basic
tmux a -t basic
tmux list-session
tmux ls
[PREFIX-s] 在tmux中查看会话列表并切换
tmux new-session <会话名>
tmux attach-session -t <会话名>
tmux rename-session -t <会话名>
tmux choose-session -t <会话名>
tmux kill-session -t <会话名>
当你临时断开多个 tmux 会话时候，可以指定恢复某个会话：

# tmux ls   #查看所有会话
0: 4 windows (created Tue Jan 22 00:42:16 2013) [177x48]
1: 1 windows (created Tue Jan 22 00:51:30 2013) [177x48]

tmux a -t 0 恢复第一个会话
快捷键

+ $ 重命名当前Session
d detach 分离会话
t big clock
? list shortcuts
: prompt
Tmux 常用功能 分割终端窗口

+ ” 在光标当前所在窗口，横向分割出一个窗口
+ % 在光标当前所在窗口，竖向分割出一个窗口
+ h ………… ,跳转光标到左边的窗口
+ j ………… ,跳转光标到下边的窗口
+ k ………… ,跳转光标到上边的窗口
+ j ………… ,跳转光标到右边的窗口
+ ! 关闭所有分割出来的窗口
+ x 关闭光标当前所在窗口。(或直接Ctrl+d)
+ { 向前置换当前面板
+ } 向后置换当前面板
+ q 查询面板编号
使用不同的窗口工作

一个终端里开了多个小窗口，还是不够用？
+ c 创建一个新的窗口
+ p 切换到上一个窗口
+ n 切换到下一个窗口
+ f 列出所有窗口
+ w 列出目前所创建的窗口,能看到窗口编号,在按编号直接切换窗口，见图2
+ 0-9 直接切换到指定编号的窗口
+ , 修改当前窗口名字,见图3
+ d 临时断开所有的会话，用命令# tmux attach 恢复会话
+ & 关闭窗口之前，你需要确认一下
把窗口分成许多面板

有时候你在编辑器工作的同时，需要查看日志文件。在编辑的同时追踪日志真的很有帮助。Tmux可以让我们把窗口分成许多面板。
举个例子，我们可以创建一个控制台监测我们的服务器，同时用编辑器构造复杂的开发环境，这样就能同时进行编译和调试了。
tmux new -s panes
+ ” 水平分割一个窗口 原来的
+ % 再竖直分割 原来的
+ 方向键 在他们之间移动
按住ctrl不放，再按方向键，可以实现panes之间大小的改变
o swap panes
q show pane numbers
x kill pane
break pane into window (e.g. to select text by mouse to copy)
restore pane from window
⍽ space - toggle between layouts
q (Show pane numbers, when the numbers show up type the key to goto that pane)
{ (Move the current pane left)
} (Move the current pane right)
z toggle pane zoom  将当前窗格最大化
分割 原先未修改键位的分割方式是[PREFIX-%]和[PREFIX-“] 重新映射为

[PREFIX-] / [PREFIX–]
关闭一个面板, 要确认

[PREFIX-x]
或者
exit [面板里执行]
切换

[PREFIX-hjkl] pane之间移动
[Ctrl-hjkl] pane之间移动
[Ctrl-] 最近使用两个窗口之间切换
[PREFIX-q] 展示窗口数字并选择跳转
[PREFIX-o] 循环切换
大小调整

[Ctrl-HJKL] pane大小调整
[PREFIX-z] trigger暂时把窗口变大
关闭及移动

[PREFIX-x] 关闭当前pane, 需确认
[PREFIX-}] 当前pane移到左边
[PREFIX-{] 当前pane移到右边
其他

[PREFIX-!] 当前pane在新的window中打开
[PREFIX-space] 会自动切换依次使用这些布局(几种窗口布局轮流切换)
复制粘贴

[PREFIX-[] 进入复制模式
=> 可以进行的操作
space/v 开始选择
Ctrl-v 整块选择
hjkl 方向键移动
w/b 向前向后移动一个单词
fx/Fx 行内移动到下一个字符位置
ctrl-b/f 在缓冲区里面翻页
g/G 到缓冲区最顶/底端
/ ? 向下, 向上查找
n/N 查找后下一个, 上一个
Enter/y 复制
[PREFIX-]] 粘贴
其他增强:

# 复制整个pane可见区域
[PREFIX-:] capture-pane
# 查看缓冲区内容
[PREFIX-:] show-buffer
# 列出缓冲区列表
[PREFIX-:] list-buffers
# 从缓冲区列表选择并插入到当期面板
[PREFIX-:] choose-buffer => 回车
其他

获得快捷键列表

[PREFIX-?]

进入命令模式

[PREFIX-:]
一些命令模式下的命令
# 新建窗口
new-window -n console
# 新建并执行命令
new-window -n processes "top"

Tmuxinator

Tmuxinator 是一个 Ruby 的 gem 包，可用于创建 Tmux 的会话。它的工作方式是先在配置文件中定义会话中的细节，然后用 1 条命令创建出这些会话
gem install tmuxinator
tmuxinator new project_a => ~/.tmuxinator/project_a.yml => 配置
启动: tmuxinator start project_a
可以别名: mux start project_a

vim插件

christoomey/vim-tmux-navigator, 安装更便捷的导航跳转
看窗口历史记录 在小窗口做一些操作时候，输出内容太多，如何回滚呢？

+ PgUP 向上回滚
+ PgDn 向下翻滚
在终端窗口里复制 在一个终端里分割了多个小窗口，你可能会在一个小窗口里复制一些代码或命令行到另外一个小窗口，这时你用小红点、鼠标、触摸板是无法胜任的。它把整个终端窗口当作是复制区域对象,而不隔离小窗口复制

[ 进入复制模式，移动光标到要复制文本区域后，按空格键开始选择要复制的内容, 利用h、j、k、l、$、0等(和vim中操作一样)，按回车确认选中的内容。
] 粘贴
上面所介绍的是一些比较实用的功能，使用熟练在于 vim 的熟练应用. (控制键的快捷键按键组合方式：Ctrl+b前面也说过弊处，后来换成Ctrl+n发现在终端中不能向下翻命令，在改成Ctrl+m后，发现回车也用不了了。直接算了
tmux clear-history
github tmux tmux的一些个性化配置

默认的tmux风格比较朴素甚至有些丑陋。如果希望做一些美化和个性化配置的话，建议使用gpakosz的tmux配置。它的本质是一个tmux配置文件，实现了以下功能：
基于powerline的美化
显示笔记本电池电量
和Mac互通的剪切板
和vim更相近的快捷键
Ctrl + A 是备用的前缀，按两次可以实现跳到行首
cd
rm -rf .tmux
git clone https://github.com/gpakosz/.tmux.git
ln -s .tmux/.tmux.conf
cp .tmux/.tmux.conf.local .
会话，窗口，面板

根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。
tmux使用C/S模型构建，主要包括以下单元模块：
server服务器。输入tmux命令时就开启了一个服务器。
session会话。一个服务器可以包含多个会话
window窗口。一个会话可以包含多个窗口。
pane面板。一个窗口可以包含多个面板。
配置

我们先来看一下几个配置，这些配置才是我离不开tmux的原因:-)。tmux的配置文件是~/.tmux.conf，这个文件可能不存在，你可以自己新建。下面开始配置，首先，有没有觉得tmux的前缀按起来太不方便了，ctrl与b键隔得太远，很多人把它映射成C+a，也就是在配置文件(~/.tmux.conf)中加入下面这条语句：
设置前缀为Ctrl + a
set -g prefix C-a
1
与此同时，取消默认的前缀按键：
解除Ctrl+b 与前缀的对应关系
unbind C-b
1
配置完以后，重启tmux起效，或者先按C+b，然后输入：，进入命令行模式，在命令行模式下输入：
source-file ~/.tmux.conf
你也可以跟我一样，在配置文件中加入下面这句话，以后改了只需要按前缀+r了。
将r 设置为加载配置文件，并显示”reloaded!”信息
bind r source-file ~/.tmux.conf \; display "Reloaded!"
1
关于前缀，很多人都喜欢改成Ctrl+a，不过我个人更喜欢Ctrl+x，如果你是vim用户，你一定懂的。还有就是面板的切换很不方便，需要先按前缀，再按方向键，还记得vim里面怎么切换各个面板的吗？tmux也可以，因为它支持映射。把前缀映射改成Ctrl+x，再加入如下几条语句，现在切换窗口就和vim一摸一样了，顿时觉得亲切了很多。
upbind-key k select-pane -U#downbind-key j select-pane -D#leftbind-key h select-pane -L#rightbind-key l select-pane -R
1
上面的最后一条语句会更改C-x l的功能，我挺喜欢这个功能的，因为我们很时候都是在两个窗口或这两个面板中切换，所以我又加入如下语句
select last window
bind-key C-l select-window -l
1
现在我的l键可不能随便按了，Ctrl+x l是切换面板，Ctrl+x Ctrl+l切换窗口，Ctrl+l清屏。
复制模式copy-mode

前缀 [ 进入复制模式
按 space 开始复制，移动光标选择复制区域
按 Enter 复制并退出copy-mode。
将光标移动到指定位置，按 PREIFX ] 粘贴
如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，我们复制的时候可不可以像vim一样移动呢？只需要在配置文件(~/.tmux.conf)中加入如下行即可。
copy-mode 将快捷键设置为vi 模式
setw -g mode-keys vi
1
会话

C-x s 以菜单的方式查看并选择会话
C-x :new-session 新建一个会话
C-x d 退出并保存会话
终端运行 tmux attach 返回会话
命名会话
tmux new -s session
tmux new -s session -d #在后台建立会话tmux ls #列出会话tmux attach -t session #进入某个会话
使当前pane 最大化

从我用vim开始，就相信这世界上有些人比你自己还了解你自己想要什么，所以乔老爷子才能做出让世人尖叫的产品，所以我经常浏览高手的.vimrc 文件，我用了tmux不到3天就发现，它怎么不能最大化当前pane?就像vim里的ZommWinPlugin.vim插件一样，你按下某键，当前窗口 就最大化了，获得最大可视界面。当目前为止，就还没有发现我有需求而别人没有的，同样，已有前人找到的解决办法，方法如下：
# zoom pane <-> window#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.shbind ^z run “tmux-zoom”##
滚屏
滚屏要进入copy-mode，即前缀+[，然后就可以用上下键来滚动屏幕，配置了vi快捷键模式，就可以像操作vi一样来滚动屏幕，非常的方便。退出直接按‘q’键即可。

////TODO  doc

tmux的基本操作

Prefix-Command前置操作：所有下面介绍的快捷键，都必须以前置操作开始。
tmux默认的前置操作是CTRL+b。例如，我们想要新建一个窗体，就需要先在键盘上摁下CTRL+b，松开后再摁下n键。

下面所有的prefix均代表CTRL+b

Session相关操作

操作	快捷键
查看/切换session	prefix s
离开Session	prefix d
重命名当前Session  	prefix $
Window相关操作

操作	快捷键
新建窗口	prefix c
切换到上一个活动的窗口	prefix space
关闭一个窗口	prefix &
使用窗口号切换	prefix 窗口号
Pane相关操作

操作	快捷键
切换到下一个窗格	prefix o
查看所有窗格的编号	prefix q
垂直拆分出一个新窗格	prefix “
水平拆分出一个新窗格	prefix %
暂时把一个窗体放到最大	prefix z
tmux的一些个性化定制

默认的tmux风格比较朴素甚至有些丑陋。如果希望做一些美化和个性化配置的话，建议使用gpakosz的tmux配置。它的本质是一个tmux配置文件，实现了以下功能：

基于powerline的美化
显示笔记本电池电量
和Mac互通的剪切板
和vim更相近的快捷键
安装方式也很简单如下 (注意：如果想使用powerline美化需要先安装powerline，具体方法见之前的博文)

Shell
$ cd
$ rm -rf .tmux
$ git clone https://github.com/gpakosz/.tmux.git
$ ln -s .tmux/.tmux.conf
$ cp .tmux/.tmux.conf.local .

$ cd
$ rm -rf .tmux
$ git clone https://github.com/gpakosz/.tmux.git
$ ln -s .tmux/.tmux.conf
$ cp .tmux/.tmux.conf.local .

//////////TODO about powerline



什么是powerline

如果你不是通过搜索引擎搜到这篇文章的话，也许你还没有听说过powerline。而你又恰巧是个*UNIX党，或者VIM党的话，那么强烈建议你了解并使用powerline。
powerline是一个stateless status line，即一个全局状态/提示栏。如果你成功为你的bash,Terminal,iTerm2,VIM配置上powerline的话，那么效果将会是这样的：
相信看了以上几个截图后，powerline的功能也就不言而喻了。他提供了各个app各个环境下的状态提示，极大的提高了工作效率

开始Mac上安装powerline

首先我们需要下载安装powerline。在正式安装之前先啰嗦几句powerline的代码结构，github上的powerline项目下涵盖了用于适配各种APP(bash，vim等)的代码。
因此，你完全可以在Mac任何一个地方下载该代码包，然后将不同的APP配置使用这个路径，以Plugin形式加载。为了方便读者选择性安装，本文对于不同的程序将分开给出安装路径和配置。

先确定本机环境有一套版本大于等于2.7的Python的环境。如果没有合适环境的话，可以通过homebrew安装，这里不多做赘述。

shell> python -v
Python 2.7.9
然后通过pip安装powerline：

shell> pip install powerline-status
安装完成后通过pip show powerline-status查看powerline所处的具体路径。
注意：这个路径很重要，会用在之后的配置环节

shell> pip show powerline-status
Name: powerline-status
Version: 2.0
Location: /Library/Python/2.7/site-packages
Requires:
配置Bash使用powerline

配置方法很简单，只需要在Bash配置文件(例如：/etc/bashrc，~/.bashrc，~/.bash_profile)中增加一行调用安装路径下的bindings/bash/powerline.sh即可。
这样每次调用生成新的Bash窗口时，都会自动执行powerline.sh文件中的内容。下面以~/.bash_profile为例：

shell> echo << EOF >> ~/.bash_profile
. /Library/Python/2.7/site-packages/powerline/bindings/bash/powerline.sh
EOF
shell> . /Library/Python/2.7/site-packages/powerline/bindings/bash/powerline.sh
注意：根据python安装方式的不同，你的powerline所在路径也可能不同。
如果你是通过python官网或者apple store通过安装工具安装的python，那么你的powerline安装路径就是/Library/Python/2.7/site-packages/powerline/。
如果你是通过brew install python的话，那么你的powerline路径可能会有不同。请根据实际情况修改上面的命令。

Teriminal字体配置

执行完上面两步后，不出意外powerline就已经开始工作了。但是你会发现Bash提示符会和下图一样是一些非常恶心的符号。
mojibake 出现这样情况的原因是powerline为了美观自己造了一些符号，而这些符号不在Unicode字库内（如果你不知道Unicode字库是什么的话可以看下博主以前的相关介绍）。
所以想要powerline正常显示的话，需要安装特殊处理过的字体。好在有一位热心人的帮助，他把大部分的程序猿常用的等宽字体都打上了powerline patch使得我们的这部配置将异常简单。
首先我们从github上下载并安装字体：

shell> git clone https://github.com/powerline/fonts.git
shell> cd fonts
shell> ./install.sh
安装完成后我们就可以在iTerm2或者Terminal的字体选项里看到并选择多个xxx for powerline的字体了。*注意：对于ASCII fonts和non-ASCII fonts都需要选择for powerline的字体。
如下图： fonts

VIM相关配置

这部分我们将介绍如何为VIM配置powerline。首先你需要确保你的vim编译时开启了python支持。
如果通过python --version|grep +python没有结果的话，那么你需要通过brew install vim --with-python --with-ruby --with-perl重新编译安装vim，
或者使用brew install macvim --env-std --override-system-vim安装macvim。

然后，你只需要在~/.vimrc中加上以下部分，VIM就能够正常加载powerline功能了：
注意：其中set rtp+=/Library/Python/2.7/site-packages/powerline/bindings/vim和上文一样需要按照自己的实际情况调整。

set rtp+=/Library/Python/2.7/site-packages/powerline/bindings/vim

" These lines setup the environment to show graphics and colors correctly.
set nocompatible
set t_Co=256

let g:minBufExplForceSyntaxEnable = 1
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif

set laststatus=2 " Always display the statusline in all windows
set guifont=Inconsolata\ for\ Powerline:h14
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
Reference:

powerline powerline installation setup vim powerline getting spiffy with powerline

/////////////////////////////Todo another one

tmux 配置文件

set -g prefix ^a
unbind ^b
bind a send-prefix
setw -g mode-keys vi

set -g base-index 1

#水平或垂直分割窗口
unbind '"'
bind - splitw -v -c "#{pane_current_path}" # 分割成上下两个窗口
unbind %
bind | splitw -h -c "#{pane_current_path}" # 分割成左右两个窗口'"'
bind c new-window -c "#{pane_current_path}"

#选择分割的窗格
bind k selectp -U # 选择上窗格
bind j selectp -D # 选择下窗格
bind h selectp -L # 选择左窗格
bind l selectp -R # 选择右窗格

#重新调整窗格的大小
bind ^k resizep -U 10 # 跟选择窗格的设置相同，只是多加 Ctrl（Ctrl-k）
bind ^j resizep -D 10 # 同上
bind ^h resizep -L 10 # ...
bind ^l resizep -R 10 # ...

#交换两个窗格
bind ^u swapp -U # 与上窗格交换 Ctrl-u
bind ^d swapp -D # 与下窗格交换 Ctrl-d

# 状态栏设置
# status bar with load and time
set -g status-bg blue
set -g status-fg '#bbbbbb'
set -g status-left-fg green
set -g status-left-bg blue
set -g status-right-fg green
set -g status-right-bg blue
set -g status-left-length 90
set -g status-right-length 90
set -g status-left '[#(whoami)]'
set -g status-right '[#(date +" %m-%d %H:%M ")]'
#set -g status-justify "centre"
set -g window-status-format '#I #W'
set -g window-status-current-format ' #I #W '
setw -g window-status-current-bg blue
setw -g window-status-current-fg green
set -g default-terminal "screen-256color"
配置文件都是从网友分享集合而成，简单介绍下常用操作，需要提醒一下的是，默认启用键改了为ctrl+a。

水平分割窗格ctrl+-就是control键加0键后面横线键，不需要shift
垂直分割窗格ctrl+|就是control键加回车键上面竖线键，需要shift
选择分割窗格和vim键的上下左右相同hjkl分别对应左、下、上和右
窗格大小变化就是和上一条移动的快捷键加多了control
向左 ctrl+h
向右 ctrl+l
向上 ctrl+k
向下 ctrl+j
交换窗格
ctrl+u与上窗格交换
ctrl+d与下窗格交换
多窗格自动分布ctrl+space空格键，主要多个窗格的时候把各个窗格大小统一调整到等宽或者等高
将当前窗格最大化ctrl+z，我记得好像是Tmux比较新的版本才有这个功能
我平时还需要登陆多个服务器去执行些命令，虽然有很多工具如fabfile等，但tmux比较直观，简单写了一些脚本，可以在各个窗格执行不同命令，然后使用ctrl+a+:输入命令set synchronize-panes,使到多个窗格都同时得到输入相同的内容。

下面脚本也是引用网友的然后自己修改了一下，这个脚本自动分割4个窗格出来，然后我每个窗格用来登陆一组服务器，使用synchronize-panes on同步输入，用来查看日志、检查运行程序等。

cmd=$(which tmux)      # tmux path

if [ -z $cmd ]; then
    echo "You need to install tmux."
    exit 1
fi

$cmd has -t $session 2> /dev/null

if [ $? != 0 ]; then
    $cmd new -d -n base-act -s $session "zsh"
    $cmd splitw -v -t $session
    $cmd splitw -h -t $session
    $cmd select-layout -t $session tiled
    $cmd send-keys -t $session:1.0 '执行的命令' C-m
    $cmd send-keys -t $session:1.1 '执行的命令' C-m
    $cmd send-keys -t $session:1.2 '执行的命令' C-m
    $cmd send-keys -t $session:1.3 '执行的命令' C-m
    $cmd set-window-option synchronize-panes on
    #$cmd neww -n vim -t $session "zsh"
    #$cmd selectw -t $session:5
fi

$cmd att -t $session

exit 0

作者：后视镜
链接：http://www.jianshu.com/p/8114288a47dd
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


////////////////


Tmux常用快捷键以及我会常到的一些问题汇总

今天部署测试服务器环境

使用到了tmux 刚开始我把tmux想象成了像omzsh这种shell 但是被指出是错误的，tmux类似于在shell里面的软件。我还真是第一次接触到这个概念。

首先安装

brew install tmux
我在安装的时候并没有遇到什么问题。



1. open session

$ tmux new-session -s basic
或者
$ tmux new -s basic
-s参数表示session名称，如果不加-s参数，那么Tmux默认会新建一个以数字(下标从0开始)命名的session，并默认打开一个window。打开一个session后，后续的所有控制Tmux本身的快捷键都需要加前缀，默认是 Ctrl+b ，以下把前缀按键称为Prefix。

2. detach session
想要暂时离开Tmux，回到终端环境时，可以通过快捷键 Prefix+d (d for detach)。要注意的时，即使是detach的状态，Tmux中在运行的程序还会继续运行。想要回到Tmux session时，只需执行：

$ tmux attach -t basic
-t参数可以指定要attach的session。

3. list session
终端中执行 tmux ls (ls for list session)可以列出当前有多少个session。如果已经在session中，执行 Prefix+s (s for session)可以列出当前有多少个session，并且可通过上、下键选择要进入的session。

4. kill session
要真正关闭一个session，可以在终端下执行命令 tmux kill-session -t basic ，其中-t参数表示session名称。

二. window
如果说session是个不可见的东西，那么window就是我们输入、执行命令的地方。一个session可以包含多个window。把window类比成iTerm2中的标签应该就理解了。

1. 创建window
在创建session的时候默认会创建一个以"数字下标+bash"命名的window，并且名称随着bash中执行的不同命令而变化。在新建session时可以通过-n参数指定默认打开的window名称，比如通过 tmux new -s basic -n win 命名一个win名称的window。也可以随时通过 Prefix+, 来修改window名称。

2. 切换window
类似标签，我们可以通过一些快捷键在同一个session下的多个window之间切换。比如:

Prefix+p (p for previous)：切换到上一个window。
Prefix+n (n for next): 切换到下一个window。
Prefix+0 : 切换到0号window，依次类推，1、2、3...
Prefix+w (w for windows): 列出当前session所有window，通过上、下键可以选择切换到指定window。

3. 关闭window
Prefix+& : 关闭当前window。

三. pane
一个window可以切割成多个pane，也就是所谓的分屏，算是Tmux的核心功能之一。

1. 分屏
Prefix+% : 垂直分屏，用一条垂线把当前窗口分成左右两屏。
Prefix+" : 水平分屏，用一条水平线把当前窗口分成上下两屏。

2. 切换pane
默认情况下，被选中(激活状态下)的pane会被绿色边框高亮突显出来。
Prefix+o : 依次切换当前窗口下的各个pane。
Prefix+Up|Down|Left|Right : 根据按箭方向选择切换到某个pane。
Prefix+Space (空格键): 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式。
Prefix+z : 最大化当前pane。再按一次后恢复。

3. 关闭pane
Prefix+x : 关闭当前使用中的pane。

关于Tmux的三个核心概念(session、window和pane)及其基本用法已经介绍完毕。接下来的是一些个性化配置和奇技淫巧，包括重新绑定快捷键、自定义快捷键、UI样式、鼠标支持、复制粘贴等等，这些可配置的高级功能也是Tmux受人推崇的原因。Tmux配置文件推荐放在~/.tmux.conf文件中，避免某个用户修改配置影响到其他用户，修改配置文件后要经过reload操作才会在已打开session中生效。

一. 重新绑定快捷键
Tmux的很多默认配置不够友好，需要个人重新定义。

unbind C-b
set -g prefix C-a

bind C-a send-prefix

bind r source-file ~/.tmux.conf \; display "tmux.conf reload!"

bind | split-window -h
bind - split-window -v

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

set -g base-index 1
set -g pane-base-index 1
第1-2行表示重新定义Prefix，把默认的 Ctrl+b 换成 Ctrl+a ，便于单手操作。
第4行重新定义 Ctrl+a 组合键，当 Prefix + Ctrl+a 按下后，等同于原先 Ctrl+a 功能，解决Ctrl+a被设置为Prefix后已有快捷键失效的问题，也就是说只要按下两次 Ctrl+a ，就能实现原先终端下回到行首的功能。
第6行定义新的快捷键 Prefix+r ，重新加载Tmux配置文件，避免每次要进入命令模式reload配置。
第8-9行重新定义分屏快捷键。使用 Prefix+| 代替 Prefix+% 实现垂直分屏，使用 Prefix+- 代替 Prefix+" 实现水平分屏。|和-的符号本身就可以表示分屏线形状，非常直观。
第11-14行重新定义上下左右方向键，遵循vi习惯。定义以后，任何需要上下左右方向键的场景都可以用hjkl替代。
第16行表示将window的起始下标设为1。因为标准键盘的0在9后面， Prefix + 0/1/2 ...切换不便。
第17行表示将pane的起始下标设为1。理由同上。

二. 鼠标支持

set-window-option -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on
第1行表示启用鼠标。虽然Tmux推荐用键盘完成所有操作，但是对现代开发人员来说，纯键盘操作的习惯并非那么容易养成，因此启用鼠标配置成为标配。
第2行表示支持鼠标选择pane。
第3行表示支持鼠标调整pane大小。
第4行表示支持鼠标选择window。

三. UI样式调整

setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright

set -g status-justify left

setw -g monitor-activity on
第1-3行表示状态栏中window标签的高亮样式，默认是绿底黑字，设置后当前window红底白字显示。
第5行表示状态栏中window列表左对齐排列。
第7行表示非当前window有内容更新时显示在状态栏。

四. 复制粘贴
默认情况下，按 Prefix+[ 进入复制模式，按回车(Enter)退出复制模式。可以通过配置在复制模式中使用vi习惯操作:

setw -g mode-keys vi
在复制模式下，按空格键(Space)开始复制，按回车(Enter)完成复制，并退出模式，按 Prefix+] 粘贴。这些快捷键也可以通过以下配置进行修改，使操作更加靠近vi。

unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection
第1-2行表示重新绑定Escape键， Prefix+Escape 为进入复制模式。
第3-4行表示重新绑定p键， Prefix+p 为粘贴。
第5行表示重新绑定v键， Prefix+v 为开始复制。
第6行表示重新绑定y键， Prefix+y 为完成复制。

要查看当前复制的内容，可以在 Prefix+: 后出现的命令行中输入 show-buffer ，输入 list-buffers 可以列出所有的复制历史内容。
关于复制粘贴，更深入的话题是Tmux和系统剪贴板之间的交互，Linux可以使用xclip，Mac可以使用tmux-MacOSX-pasteboard，不过我没有试验成功，暂时可以通过ALT + 鼠标复制内容到系统剪贴板。

五. 多屏操作
默认情况下，一个window上只有一个pane被激活，接收键盘交互。但是某些场景下需要在多个pane中执行相同的操作，比如同时修改两台或更多台远程机器的nginx配置，这时候可以在分屏后按 Prefix+: 进入命令模式，输入 set synchronize-panes ，即可进入批量操作模式，要退出批量操作模式，再次输入 set synchronize-panes 即可。



此文转自http://ju.outofmemory.cn/entry/126553


//////////////////


快捷键

一般情况下 tmux 中所有的快捷键都需要和前缀快捷键 ⌃b 来组合使用（注：⌃ 为 Mac 的 control 键），以下是常用的窗格（pane）快捷键列表，大家可以依次尝试下：

窗格操作

% 左右平分出两个窗格
" 上下平分出两个窗格
x 关闭当前窗格
{ 当前窗格前移
} 当前窗格后移
; 选择上次使用的窗格
o 选择下一个窗格，也可以使用上下左右方向键来选择
space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换
z 最大化当前窗格，再次执行可恢复原来大小
q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格
窗口操作

tmux 除了窗格以外，还有窗口（window） 的概念。依次使用以下快捷键来熟悉 tmux 的窗口操作：

c 新建窗口，此时当前窗口会切换至新窗口，不影响原有窗口的状态
p 切换至上一窗口
n 切换至下一窗口
w 窗口列表选择，注意 macOS 下使用 ⌃p 和 ⌃n 进行上下选择
& 关闭当前窗口
, 重命名窗口，可以使用中文，重命名后能在 tmux 状态栏更快速的识别窗口 id
0 切换至 0 号窗口，使用其他数字 id 切换至对应窗口
f 根据窗口名搜索选择窗口，可模糊匹配

会话操作

如果运行了多次 tmux 命令则会开启多个 tmux 会话（session）。在 tmux 会话中，使用前缀快捷键 ⌃b 配合以下快捷键可操作会话：

$ 重命名当前会话
s 选择会话列表
d detach 当前会话，运行后将会退出 tmux 进程，返回至 shell 主进程
在 shell 主进程下运行以下命令可以操作 tmux 会话：


tmux new -s foo # 新建名称为 foo 的会话
tmux ls # 列出所有 tmux 会话
tmux a # 恢复至上一次的会话
tmux a -t foo # 恢复名称为 foo 的会话，会话默认名称为数字
tmux kill-session -t foo # 删除名称为 foo 的会话
tmux kill-server # 删除所有的会话



除以上提到的快捷键以外，tmux 还有许多其他的快捷键和命令，使用前缀快捷键 ⌃b 加 ? 可以查看所有的快捷键列表，该列表视图为 tmux copy 模式，该模式下可使用以下快捷键（无需加 ⌃b 前缀）：

⌃v 下一页
Meta v 上一页 （tmux 快捷键为 Emacs 风格，这里的 Meta 键可用 Esc 模拟）
⌃s 向前搜索
q 退出 copy 模式
常见配置与问题

1、鼠标滚屏

tmux 默认配置中最糟糕的体验就是滚屏查看和文本复制（大家可以先试试看）。你需要先使用 ⌃b [ 快捷键进入 copy 模式，然后使用翻页、字符定位来选择需要的字符，效率远没有鼠标选择来的快。

因此 tmux 提供了一些个性化配置项来优化这些配置，首先在 shell 中运行 touch ~/.tmux.conf 新建用户配置文件。在文件中增加以下内容：


# 开启鼠标模式
set -g mode-mouse on
​
# 允许鼠标选择窗格
set -g mouse-select-pane on
​
# 如果喜欢给窗口自定义命名，那么需要关闭窗口的自动命名
set-option -g allow-rename off
​
# 如果对 vim 比较熟悉，可以将 copy mode 的快捷键换成 vi 模式
set-window-option -g mode-keys vi



配置文件修改完成后，可以 tmux kill-server 重启所有 tmux 进程，或者在 tmux 会话中使用 ⌃b : 进入控制台模式，输入 source-file ~/.tmux.conf 命令重新加载配置。



2、鼠标复制

tmux 下开启鼠标滚屏后，复制文本有两种方式：

方法 1：使用 ⌃b z 进入窗格全屏模式，鼠标选择文本的同时按住 option 键 ⌥，然后使用 ⌘c 进行复制；
方法 2：开启 iTerm2 「在选择时复制」选项，即可实现自动选择复制

3、tips

screen 是另外一款终端复用命令行，但他没有 tmux 好看好用；
tmux 有个 bug ，导致从它启动的 vscode 的复制粘贴快捷键会失效；
iTerm2 可以通过 「Preferences -> Profiles -> Keyboard Behavior -> Left option key acts as +Esc」将键盘的左侧 option 键映射为 Meta 键


-- 基本使用
tmux   //

运行C-b d   //返回主 shell ，detach, tmux 依旧在后台运行，里面的命令也保持运行状态
tmux attach  //恢复tmux
-- 快捷键
tmux 的使用主要就是依靠快捷键，通过 C-b 来调用。
C-b ?  // 显示快捷键帮助
C-b C-o  //调换窗口位置
C-b 空格键  //采用下一个内置布局.
             在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-                 horizontal、main-vertical、tiled
C-b ! // 把当前窗口变为新窗口
C-b  "  // 模向分隔窗口
C-b % // 纵向分隔窗口
C-b q // 显示分隔窗口的编号
C-b o // 跳到下一个分隔窗口
C-b 上下键 // 上一个及下一个分隔窗口
C-b C-方向键 //调整分隔窗口大小
C-b & // 确认后退出 tmux
C-b c // 创建新窗口
C-b ，//修改当前窗口名称
C-b 0~9 //选择几号窗口
C-b c // 创建新窗口
C-b n // 选择下一个窗口
C-b l // 最后使用的窗口
C-b p // 选择前一个窗口
C-b w // 以菜单方式显示及选择窗口
C-b s // 以菜单方式显示和选择会话
C-b t //显示时钟
C-b Ctrl+方向键 以1个单元格为单位移动边缘以调整当前面板大小
C-b Alt+方向键 以5个单元格为单位移动边缘以调整当前面板大小
C-b { 向前置换当前面板

C-b } 向后置换当前面板


///////////////// TODO  SCREEN

screen -S yourname -> 新建一个叫yourname的session
screen -ls -> 列出当前所有的session
screen -r yourname -> 回到yourname这个session
screen -d yourname -> 远程detach某个session
screen -d -r yourname -> 结束当前session并回到yourname这个session


C-a ? -> 显示所有键绑定信息
C-a c -> 创建一个新的运行shell的窗口并切换到该窗口
C-a n -> Next，切换到下一个 window
C-a p -> Previous，切换到前一个 window
C-a 0..9 -> 切换到第 0..9 个 window
Ctrl+a [Space] -> 由视窗0循序切换到视窗9
C-a C-a -> 在两个最近使用的 window 间切换
C-a x -> 锁住当前的 window，需用用户密码解锁
C-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，
此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。
C-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。
C-a w -> 显示所有窗口列表
C-a t -> time，显示当前时间，和系统的 load
C-a k -> kill window，强行关闭当前的 window
C-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样
C-b Backward，PageUp
C-f Forward，PageDown
H(大写) High，将光标移至左上角
L Low，将光标移至左下角
0 移到行首
$ 行末
w forward one word，以字为单位往前移
b backward one word，以字为单位往后移
Space 第一次按为标记区起点，第二次按为终点
Esc 结束 copy mode
C-a ] -> paste，把刚刚在 copy mode 选定的内容贴上
[root@TS-DEV ~]# yum install screen
[root@TS-DEV ~]# rpm -qa|grep screen
screen-4.0.3-4.el5

来自: http://man.linuxde.net/screen


来自: http://man.linuxde.net/screen


来自: http://man.linuxde.net/screen
http://www.gnu.org/software/screen/
http://www.byobu.co/about.html



///////////   TODO
http://man.openbsd.org/OpenBSD-current/man1/tmux.1

NAME
tmux — terminal multiplexer
SYNOPSIS
tmux 	[-2Cluv] [-c shell-command] [-f file] [-L socket-name] [-S socket-path] [command [flags]]
DESCRIPTION
tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.
When tmux is started it creates a new session with a single window and displays it on screen. A status line at the bottom of the screen shows information on the current session and is used to enter interactive commands.
A session is a single collection of pseudo terminals under the management of tmux. Each session has one or more windows linked to it. A window occupies the entire screen and may be split into rectangular panes, each of which is a separate pseudo terminal (the pty(4) manual page documents the technical details of pseudo terminals). Any number of tmux instances may connect to the same session, and any number of windows may be present in the same session. Once all sessions are killed, tmux exits.
Each session is persistent and will survive accidental disconnection (such as ssh(1) connection timeout) or intentional detaching (with the ‘C-b d’ key strokes). tmux may be reattached using:
$ tmux attach
In tmux, a session is displayed on screen by a client and all sessions are managed by a single server. The server and each client are separate processes which communicate through a socket in /tmp.
The options are as follows:



-2
    Force tmux to assume the terminal supports 256 colours.


-C
    Start in control mode (see the CONTROL MODE section). Given twice (-CC) disables echo.


-c shell-command
    Execute shell-command using the default shell. If necessary, the tmux server will be started to retrieve the default-shell option. This option is for compatibility with sh(1) when tmux is used as a login shell.


-f file
    Specify an alternative configuration file. By default, tmux loads the system configuration file from /etc/tmux.conf, if present, then looks for a user configuration file at ~/.tmux.conf.
    The configuration file is a set of tmux commands which are executed in sequence when the server is first started. tmux loads configuration files once when the server process has started. The source-file command may be used to load a file later.
    tmux shows any error messages from commands in configuration files in the first session created, and continues to process the rest of the configuration file.


-L socket-name
    tmux stores the server socket in a directory under TMUX_TMPDIR or /tmp if it is unset. The default socket is named default. This option allows a different socket name to be specified, allowing several independent tmux servers to be run. Unlike -S a full path is not necessary: the sockets are all created in the same directory.
    If the socket is accidentally removed, the SIGUSR1 signal may be sent to the tmux server process to recreate it (note that this will fail if any parent directories are missing).


-l
    Behave as a login shell. This flag currently has no effect and is for compatibility with other shells when using tmux as a login shell.


-S socket-path
    Specify a full alternative path to the server socket. If -S is specified, the default socket directory is not used and any -L flag is ignored.


-u
    When starting, tmux looks for the LC_ALL, LC_CTYPE and LANG environment variables: if the first found contains ‘UTF-8’, then the terminal is assumed to support UTF-8. This is not always correct: the -u flag explicitly informs tmux that UTF-8 is supported.
    Note that tmux itself always accepts UTF-8; this controls whether it will send UTF-8 characters to the terminal it is running (if not, they are replaced by ‘_’).


-v
    Request verbose logging. Log messages will be saved into tmux-client-PID.log and tmux-server-PID.log files in the current directory, where PID is the PID of the server or client process.
    If -v is specified twice, an additional tmux-out-PID.log file is generated with a copy of everything tmux writes to the terminal.
    The SIGUSR2 signal may be sent to the tmux server process to toggle logging between on (as if -v was given) and off.


command [flags]
    This specifies one of a set of commands used to control tmux, as described in the following sections. If no commands are specified, the new-session command is assumed.

KEY BINDINGS
tmux may be controlled from an attached client by using a key combination of a prefix key, ‘C-b’ (Ctrl-b) by default, followed by a command key.
The default command key bindings are:

C-b
    Send the prefix key (C-b) through to the application.
C-o
    Rotate the panes in the current window forwards.
C-z
    Suspend the tmux client.
!
    Break the current pane out of the window.
"
    Split the current pane into two, top and bottom.
#
    List all paste buffers.
$
    Rename the current session.
%
    Split the current pane into two, left and right.
&
    Kill the current window.
'
    Prompt for a window index to select.
(
    Switch the attached client to the previous session.
)
    Switch the attached client to the next session.
,
    Rename the current window.
-
    Delete the most recently copied buffer of text.
.
    Prompt for an index to move the current window.
0 to 9
    Select windows 0 to 9.
:
    Enter the tmux command prompt.
;
    Move to the previously active pane.
=
    Choose which buffer to paste interactively from a list.
?
    List all key bindings.
D
    Choose a client to detach.
L
    Switch the attached client back to the last session.
[
    Enter copy mode to copy text or view the history.
]
    Paste the most recently copied buffer of text.
c
    Create a new window.
d
    Detach the current client.
f
    Prompt to search for text in open windows.
i
    Display some information about the current window.
l
    Move to the previously selected window.
n
    Change to the next window.
o
    Select the next pane in the current window.
p
    Change to the previous window.
q
    Briefly display pane indexes.
r
    Force redraw of the attached client.
m
    Mark the current pane (see select-pane -m).
M
    Clear the marked pane.
s
    Select a new session for the attached client interactively.
t
    Show the time.
w
    Choose the current window interactively.
x
    Kill the current pane.
z
    Toggle zoom state of the current pane.
{
    Swap the current pane with the previous pane.
}
    Swap the current pane with the next pane.
~
    Show previous messages from tmux, if any.
Page Up
    Enter copy mode and scroll one page up.
Up, Down

Left, Right
    Change to the pane above, below, to the left, or to the right of the current pane.
M-1 to M-5
    Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.
Space
    Arrange the current window in the next preset layout.
M-n
    Move to the next window with a bell or activity marker.
M-o
    Rotate the panes in the current window backwards.
M-p
    Move to the previous window with a bell or activity marker.
C-Up, C-Down

C-Left, C-Right
    Resize the current pane in steps of one cell.
M-Up, M-Down

M-Left, M-Right
    Resize the current pane in steps of five cells.

Key bindings may be changed with the bind-key and unbind-key commands.
COMMANDS
This section contains a list of the commands supported by tmux. Most commands accept the optional -t (and sometimes -s) argument with one of target-client, target-session target-window, or target-pane. These specify the client, session, window or pane which a command should affect.
target-client should be the name of the client, typically the pty(4) file to which the client is connected, for example either of /dev/ttyp1 or ttyp1 for the client attached to /dev/ttyp1. If no client is specified, tmux attempts to work out the client currently in use; if that fails, an error is reported. Clients may be listed with the list-clients command.
target-session is tried as, in order:

    A session ID prefixed with a $.
    An exact name of a session (as listed by the list-sessions command).
    The start of a session name, for example ‘mysess’ would match a session named ‘mysession’.
    An fnmatch(3) pattern which is matched against the session name.

If the session name is prefixed with an ‘=’, only an exact match is accepted (so ‘=mysess’ will only match exactly ‘mysess’, not ‘mysession’).
If a single session is found, it is used as the target session; multiple matches produce an error. If a session is omitted, the current session is used if available; if no current session is available, the most recently used is chosen.
target-window (or src-window or dst-window) specifies a window in the form session:window. session follows the same rules as for target-session, and window is looked for in order as:

    A special token, listed below.
    A window index, for example ‘mysession:1’ is window 1 in session ‘mysession’.
    A window ID, such as @1.
    An exact window name, such as ‘mysession:mywindow’.
    The start of a window name, such as ‘mysession:mywin’.
    As an fnmatch(3) pattern matched against the window name.

Like sessions, a ‘=’ prefix will do an exact match only. An empty window name specifies the next unused index if appropriate (for example the new-window and link-window commands) otherwise the current window in session is chosen.
The following special tokens are available to indicate particular windows. Each has a single-character alternative form.
Token 		Meaning
{start} 	^ 	The lowest-numbered window
{end} 	$ 	The highest-numbered window
{last} 	! 	The last (previously current) window
{next} 	+ 	The next window by number
{previous} 	- 	The previous window by number
target-pane (or src-pane or dst-pane) may be a pane ID or takes a similar form to target-window but with the optional addition of a period followed by a pane index or pane ID, for example: ‘mysession:mywindow.1’. If the pane index is omitted, the currently active pane in the specified window is used. The following special tokens are available for the pane index:
Token 		Meaning
{last} 	! 	The last (previously active) pane
{next} 	+ 	The next pane by number
{previous} 	- 	The previous pane by number
{top} 		The top pane
{bottom} 		The bottom pane
{left} 		The leftmost pane
{right} 		The rightmost pane
{top-left} 		The top-left pane
{top-right} 		The top-right pane
{bottom-left} 		The bottom-left pane
{bottom-right} 		The bottom-right pane
{up-of} 		The pane above the active pane
{down-of} 		The pane below the active pane
{left-of} 		The pane to the left of the active pane
{right-of} 		The pane to the right of the active pane
The tokens ‘+’ and ‘-’ may be followed by an offset, for example:

select-window -t:+2

In addition, target-session, target-window or target-pane may consist entirely of the token ‘{mouse}’ (alternative form ‘=’) to specify the most recent mouse event (see the MOUSE SUPPORT section) or ‘{marked}’ (alternative form ‘~’) to specify the marked pane (see select-pane -m).
Sessions, window and panes are each numbered with a unique ID; session IDs are prefixed with a ‘$’, windows with a ‘@’, and panes with a ‘%’. These are unique and are unchanged for the life of the session, window or pane in the tmux server. The pane ID is passed to the child process of the pane in the TMUX_PANE environment variable. IDs may be displayed using the ‘session_id’, ‘window_id’, or ‘pane_id’ formats (see the FORMATS section) and the display-message, list-sessions, list-windows or list-panes commands.
shell-command arguments are sh(1) commands. This may be a single argument passed to the shell, for example:

new-window 'vi /etc/passwd'

Will run:

/bin/sh -c 'vi /etc/passwd'

Additionally, the new-window, new-session, split-window, respawn-window and respawn-pane commands allow shell-command to be given as multiple arguments and executed directly (without ‘sh -c’). This can avoid issues with shell quoting. For example:

$ tmux new-window vi /etc/passwd

Will run vi(1) directly without invoking the shell.
command [arguments] refers to a tmux command, passed with the command and arguments separately, for example:

bind-key F1 set-window-option force-width 81

Or if using sh(1):

$ tmux bind-key F1 set-window-option force-width 81

Multiple commands may be specified together as part of a command sequence. Each command should be separated by spaces and a semicolon; commands are executed sequentially from left to right and lines ending with a backslash continue on to the next line, except when escaped by another backslash. A literal semicolon may be included by escaping it with a backslash (for example, when specifying a command sequence to bind-key).
Example tmux commands include:

refresh-client -t/dev/ttyp2

rename-session -tfirst newname

set-window-option -t:0 monitor-activity on

new-window ; split-window -d

bind-key R source-file ~/.tmux.conf \; \
	display-message "source-file done"

Or from sh(1):

$ tmux kill-window -t :1

$ tmux new-window \; split-window -d

$ tmux new-session -d 'vi /etc/passwd' \; split-window -d \; attach

CLIENTS AND SESSIONS
The tmux server manages clients, sessions, windows and panes. Clients are attached to sessions to interact with them, either when they are created with the new-session command, or later with the attach-session command. Each session has one or more windows linked into it. Windows may be linked to multiple sessions and are made up of one or more panes, each of which contains a pseudo terminal. Commands for creating, linking and otherwise manipulating windows are covered in the WINDOWS AND PANES section.
The following commands are available to manage clients and sessions:



attach-session [-dEr] [-c working-directory] [-t target-session]
    (alias: attach)
    If run from outside tmux, create a new client in the current terminal and attach it to target-session. If used from inside, switch the current client. If -d is specified, any other clients attached to the session are detached. -r signifies the client is read-only (only keys bound to the detach-client or switch-client commands have any effect)
    If no server is started, attach-session will attempt to start it; this will fail unless sessions are created in the configuration file.
    The target-session rules for attach-session are slightly adjusted: if tmux needs to select the most recently used session, it will prefer the most recently used unattached session.
    -c will set the session working directory (used for new windows) to working-directory.
    If -E is used, the update-environment option will not be applied.


detach-client [-aP] [-E shell-command] [-s target-session] [-t target-client]
    (alias: detach)
    Detach the current client if bound to a key, the client specified with -t, or all clients currently attached to the session specified by -s. The -a option kills all but the client given with -t. If -P is given, send SIGHUP to the parent process of the client, typically causing it to exit. With -E, run shell-command to replace the client.


has-session [-t target-session]
    (alias: has)
    Report an error and exit with 1 if the specified session does not exist. If it does exist, exit with 0.


kill-server
    Kill the tmux server and clients and destroy all sessions.


kill-session [-aC] [-t target-session]
    Destroy the given session, closing any windows linked to it and no other sessions, and detaching all clients attached to it. If -a is given, all sessions but the specified one is killed. The -C flag clears alerts (bell, activity, or silence) in all windows linked to the session.


list-clients [-F format] [-t target-session]
    (alias: lsc)
    List all clients attached to the server. For the meaning of the -F flag, see the FORMATS section. If target-session is specified, list only clients connected to that session.


list-commands [-F format]
    (alias: lscm)
    List the syntax of all commands supported by tmux.


list-sessions [-F format]
    (alias: ls)
    List all sessions managed by the server. For the meaning of the -F flag, see the FORMATS section.


lock-client [-t target-client]
    (alias: lockc)
    Lock target-client, see the lock-server command.


lock-session [-t target-session]
    (alias: locks)
    Lock all clients attached to target-session.


new-session [-AdDEP] [-c start-directory] [-F format] [-n window-name] [-s session-name] [-t group-name] [-x width] [-y height] [shell-command]
    (alias: new)
    Create a new session with name session-name.
    The new session is attached to the current terminal unless -d is given. window-name and shell-command are the name of and shell command to execute in the initial window. With -d, the initial size is 80 x 24; -x and -y can be used to specify a different size.
    If run from a terminal, any termios(4) special characters are saved and used for new windows in the new session.
    The -A flag makes new-session behave like attach-session if session-name already exists; in this case, -D behaves like -d to attach-session.
    If -t is given, it specifies a session group. Sessions in the same group share the same set of windows - new windows are linked to all sessions in the group and any windows closed removed from all sessions. The current and previous window and any session options remain independent and any session in a group may be killed without affecting the others. The group-name argument may be:

        the name of an existing group, in which case the new session is added to that group;
        the name of an existing session - the new session is added to the same group as that session, creating a new group if necessary;
        the name for a new group containing only the new session.

    -n and shell-command are invalid if -t is used.
    The -P option prints information about the new session after it has been created. By default, it uses the format ‘#{session_name}:’ but a different format may be specified with -F.
    If -E is used, the update-environment option will not be applied.


refresh-client [-C width,height] [-S] [-t target-client]
    (alias: refresh)
    Refresh the current client if bound to a key, or a single client if one is given with -t. If -S is specified, only update the client's status line.
    -C sets the width and height of a control client.


rename-session [-t target-session] new-name
    (alias: rename)
    Rename the session to new-name.


show-messages [-JT] [-t target-client]
    (alias: showmsgs)
    Show client messages or server information. Any messages displayed on the status line are saved in a per-client message log, up to a maximum of the limit set by the message-limit server option. With -t, display the log for target-client. -J and -T show debugging information about jobs and terminals.


source-file [-q] path
    (alias: source)
    Execute commands from path (which may be a glob(3) pattern). If -q is given, no error will be returned if path does not exist.
    Within a configuration file, commands may be made conditional by surrounding them with %if and %endif lines. Additional %elif and %else lines may also be used. The argument to %if and %elif is expanded as a format and if it evaluates to false (zero or empty), subsequent lines are ignored until the next %elif, %else or %endif. For example:

    %if #{==:#{host},myhost}
    set -g status-style bg=red
    %elif #{==:#{host},myotherhost}
    set -g status-style bg=green
    %else
    set -g status-style bg=blue
    %endif


    Will change the status line to red if running on ‘myhost’, green if running on ‘myotherhost’, or blue if running on another host.


start-server
    (alias: start)
    Start the tmux server, if not already running, without creating any sessions.


suspend-client [-t target-client]
    (alias: suspendc)
    Suspend a client by sending SIGTSTP (tty stop).


switch-client [-Elnpr] [-c target-client] [-t target-session] [-T key-table]
    (alias: switchc)
    Switch the current session for client target-client to target-session. If -l, -n or -p is used, the client is moved to the last, next or previous session respectively. -r toggles whether a client is read-only (see the attach-session command).
    If -E is used, update-environment option will not be applied.
    -T sets the client's key table; the next key from the client will be interpreted from key-table. This may be used to configure multiple prefix keys, or to bind commands to sequences of keys. For example, to make typing ‘abc’ run the list-keys command:

    bind-key -Ttable2 c list-keys
    bind-key -Ttable1 b switch-client -Ttable2
    bind-key -Troot   a switch-client -Ttable1


WINDOWS AND PANES
A tmux window may be in one of two modes. The default permits direct access to the terminal attached to the window. The other is copy mode, which permits a section of a window or its history to be copied to a paste buffer for later insertion into another window. This mode is entered with the copy-mode command, bound to ‘[’ by default. It is also entered when a command that produces output, such as list-keys, is executed from a key binding.
Commands are sent to copy mode using the -X flag to the send-keys command. When a key is pressed, copy mode automatically uses one of two key tables, depending on the mode-keys option: copy-mode for emacs, or copy-mode-vi for vi. Key tables may be viewed with the list-keys command.
The following commands are supported in copy mode:
Command 	vi 	emacs
append-selection
append-selection-and-cancel 	A
back-to-indentation 	^ 	M-m
begin-selection 	Space 	C-Space
bottom-line 	L
cancel 	q 	Escape
clear-selection 	Escape 	C-g
copy-end-of-line 	D 	C-k
copy-line
copy-pipe <command>
copy-pipe-and-cancel <command>
copy-selection
copy-selection-and-cancel 	Enter 	M-w
cursor-down 	j 	Down
cursor-left 	h 	Left
cursor-right 	l 	Right
cursor-up 	k 	Up
end-of-line 	$ 	C-e
goto-line <line> 	: 	g
halfpage-down 	C-d 	M-Down
halfpage-down-and-cancel
halfpage-up 	C-u 	M-Up
history-bottom 	G 	M->
history-top 	g 	M-<
jump-again 	; 	;
jump-backward <to> 	F 	F
jump-forward <to> 	f 	f
jump-reverse 	, 	,
jump-to-backward <to> 	T
jump-to-forward <to> 	t
middle-line 	M 	M-r
next-paragraph 	} 	M-}
next-space 	W
next-space-end 	E
next-word 	w
next-word-end 	e 	M-f
other-end 	o
page-down 	C-f 	PageDown
page-down-and-cancel
page-up 	C-b 	PageUp
previous-paragraph 	{ 	M-{
previous-space 	B
previous-word 	b 	M-b
rectangle-toggle 	v 	R
scroll-down 	C-e 	C-Down
scroll-down-and-cancel
scroll-up 	C-y 	C-Up
search-again 	n 	n
search-backward <for> 	?
search-forward <for> 	/
search-backward-incremental <for> 		C-r
search-forward-incremental <for> 		C-s
search-reverse 	N 	N
select-line 	V
start-of-line 	0 	C-a
stop-selection
top-line 	H 	M-R
The ‘-and-cancel’ variants of some commands exit copy mode after they have completed (for copy commands) or when the cursor reaches the bottom (for scrolling commands).
The next and previous word keys use space and the ‘-’, ‘_’ and ‘@’ characters as word delimiters by default, but this can be adjusted by setting the word-separators session option. Next word moves to the start of the next word, next word end to the end of the next word and previous word to the start of the previous word. The three next and previous space keys work similarly but use a space alone as the word separator.
The jump commands enable quick movement within a line. For instance, typing ‘f’ followed by ‘/’ will move the cursor to the next ‘/’ character on the current line. A ‘;’ will then jump to the next occurrence.
Commands in copy mode may be prefaced by an optional repeat count. With vi key bindings, a prefix is entered using the number keys; with emacs, the Alt (meta) key and a number begins prefix entry.
The synopsis for the copy-mode command is:



copy-mode [-Meu] [-t target-pane]
    Enter copy mode. The -u option scrolls one page up. -M begins a mouse drag (only valid if bound to a mouse key binding, see MOUSE SUPPORT). -e specifies that scrolling to the bottom of the history (to the visible screen) should exit copy mode. While in copy mode, pressing a key other than those used for scrolling will disable this behaviour. This is intended to allow fast scrolling through a pane's history, for example with:

    bind PageUp copy-mode -eu


Each window displayed by tmux may be split into one or more panes; each pane takes up a certain area of the display and is a separate terminal. A window may be split into panes using the split-window command. Windows may be split horizontally (with the -h flag) or vertically. Panes may be resized with the resize-pane command (bound to ‘C-Up’, ‘C-Down’ ‘C-Left’ and ‘C-Right’ by default), the current pane may be changed with the select-pane command and the rotate-window and swap-pane commands may be used to swap panes without changing their position. Panes are numbered beginning from zero in the order they are created.
A number of preset layouts are available. These may be selected with the select-layout command or cycled with next-layout (bound to ‘Space’ by default); once a layout is chosen, panes within it may be moved and resized as normal.
The following layouts are supported:



even-horizontal
    Panes are spread out evenly from left to right across the window.


even-vertical
    Panes are spread evenly from top to bottom.


main-horizontal
    A large (main) pane is shown at the top of the window and the remaining panes are spread from left to right in the leftover space at the bottom. Use the main-pane-height window option to specify the height of the top pane.


main-vertical
    Similar to main-horizontal but the large pane is placed on the left and the others spread from top to bottom along the right. See the main-pane-width window option.


tiled
    Panes are spread out as evenly as possible over the window in both rows and columns.

In addition, select-layout may be used to apply a previously used layout - the list-windows command displays the layout of each window in a form suitable for use with select-layout. For example:

$ tmux list-windows
0: ksh [159x48]
    layout: bb62,159x48,0,0{79x48,0,0,79x48,80,0}
$ tmux select-layout bb62,159x48,0,0{79x48,0,0,79x48,80,0}

tmux automatically adjusts the size of the layout for the current window size. Note that a layout cannot be applied to a window with more panes than that from which the layout was originally defined.
Commands related to windows and panes are as follows:



break-pane [-dP] [-F format] [-n window-name] [-s src-pane] [-t dst-window]
    (alias: breakp)
    Break src-pane off from its containing window to make it the only pane in dst-window. If -d is given, the new window does not become the current window. The -P option prints information about the new window after it has been created. By default, it uses the format ‘#{session_name}:#{window_index}’ but a different format may be specified with -F.


capture-pane [-aepPqCJ] [-b buffer-name] [-E end-line] [-S start-line] [-t target-pane]
    (alias: capturep)
    Capture the contents of a pane. If -p is given, the output goes to stdout, otherwise to the buffer specified with -b or a new buffer if omitted. If -a is given, the alternate screen is used, and the history is not accessible. If no alternate screen exists, an error will be returned unless -q is given. If -e is given, the output includes escape sequences for text and background attributes. -C also escapes non-printable characters as octal \xxx. -J joins wrapped lines and preserves trailing spaces at each line's end. -P captures only any output that the pane has received that is the beginning of an as-yet incomplete escape sequence.
    -S and -E specify the starting and ending line numbers, zero is the first line of the visible pane and negative numbers are lines in the history. ‘-’ to -S is the start of the history and to -E the end of the visible pane. The default is to capture only the visible contents of the pane.


choose-client [-N] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template]
    Put a pane into client mode, allowing a client to be selected interactively from a list. The following keys may be used in client mode:
    Key 	Function
    Enter 	Choose selected client
    Up 	Select previous client
    Down 	Select next client
    C-s 	Search by name
    n 	Repeat last search
    t 	Toggle if client is tagged
    T 	Tag no clients
    C-t 	Tag all clients
    d 	Detach selected client
    D 	Detach tagged clients
    x 	Detach and HUP selected client
    X 	Detach and HUP tagged clients
    z 	Suspend selected client
    Z 	Suspend tagged clients
    f 	Enter a format to filter items
    O 	Change sort order
    v 	Toggle preview
    q 	Exit mode
    After a client is chosen, ‘%%’ is replaced by the client name in template and the result executed as a command. If template is not given, "detach-client -t '%%'" is used.
    -O specifies the initial sort order: one of ‘name’, ‘size’, ‘creation’, or ‘activity’. -f specifies an initial filter: the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown. If a filter would lead to an empty list, it is ignored. -F specifies the format for each item in the list. -N starts without the preview. This command works only if at least one client is attached.


choose-tree [-GNsw] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template]
    Put a pane into tree mode, where a session, window or pane may be chosen interactively from a list. -s starts with sessions collapsed and -w with windows collapsed. The following keys may be used in tree mode:
    Key 	Function
    Enter 	Choose selected item
    Up 	Select previous item
    Down 	Select next item
    < 	Scroll list of previews left
    > 	Scroll list of previews right
    C-s 	Search by name
    n 	Repeat last search
    t 	Toggle if item is tagged
    T 	Tag no items
    C-t 	Tag all items
    : 	Run a command for each tagged item
    f 	Enter a format to filter items
    O 	Change sort order
    v 	Toggle preview
    q 	Exit mode
    After a session, window or pane is chosen, ‘%%’ is replaced by the target in template and the result executed as a command. If template is not given, "switch-client -t '%%'" is used.
    -O specifies the initial sort order: one of ‘index’, ‘name’, or ‘time’. -f specifies an initial filter: the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown. If a filter would lead to an empty list, it is ignored. -F specifies the format for each item in the tree. -N starts without the preview. -G includes all sessions in any session groups in the tree rather than only the first. This command works only if at least one client is attached.


display-panes [-d duration] [-t target-client] [template]
    (alias: displayp)
    Display a visible indicator of each pane shown by target-client. See the display-panes-colour and display-panes-active-colour session options. The indicator is closed when a key is pressed or duration milliseconds have passed. If -d is not given, display-panes-time is used. A duration of zero means the indicator stays until a key is pressed. While the indicator is on screen, a pane may be chosen with the ‘0’ to ‘9’ keys, which will cause template to be executed as a command with ‘%%’ substituted by the pane ID. The default template is "select-pane -t '%%'".


find-window [-CNT] [-t target-pane] match-string
    (alias: findw)
    Search for the fnmatch(3) pattern match-string in window names, titles, and visible content (but not history). The flags control matching behavior: -C matches only visible window contents, -N matches only the window name and -T matches only the window title. The default is -CNT.
    This command works only if at least one client is attached.


join-pane [-bdhv] [-l size | -p percentage] [-s src-pane] [-t dst-pane]
    (alias: joinp)
    Like split-window, but instead of splitting dst-pane and creating a new pane, split it and move src-pane into the space. This can be used to reverse break-pane. The -b option causes src-pane to be joined to left of or above dst-pane.
    If -s is omitted and a marked pane is present (see select-pane -m), the marked pane is used rather than the current pane.


kill-pane [-a] [-t target-pane]
    (alias: killp)
    Destroy the given pane. If no panes remain in the containing window, it is also destroyed. The -a option kills all but the pane given with -t.


kill-window [-a] [-t target-window]
    (alias: killw)
    Kill the current window or the window at target-window, removing it from any sessions to which it is linked. The -a option kills all but the window given with -t.


last-pane [-de] [-t target-window]
    (alias: lastp)
    Select the last (previously selected) pane. -e enables or -d disables input to the pane.


last-window [-t target-session]
    (alias: last)
    Select the last (previously selected) window. If no target-session is specified, select the last window of the current session.


link-window [-adk] [-s src-window] [-t dst-window]
    (alias: linkw)
    Link the window at src-window to the specified dst-window. If dst-window is specified and no such window exists, the src-window is linked there. With -a, the window is moved to the next index up (following windows are moved if necessary). If -k is given and dst-window exists, it is killed, otherwise an error is generated. If -d is given, the newly linked window is not selected.


list-panes [-as] [-F format] [-t target]
    (alias: lsp)
    If -a is given, target is ignored and all panes on the server are listed. If -s is given, target is a session (or the current session). If neither is given, target is a window (or the current window). For the meaning of the -F flag, see the FORMATS section.


list-windows [-a] [-F format] [-t target-session]
    (alias: lsw)
    If -a is given, list all windows on the server. Otherwise, list windows in the current session or in target-session. For the meaning of the -F flag, see the FORMATS section.


move-pane [-bdhv] [-l size | -p percentage] [-s src-pane] [-t dst-pane]
    (alias: movep)
    Like join-pane, but src-pane and dst-pane may belong to the same window.


move-window [-ardk] [-s src-window] [-t dst-window]
    (alias: movew)
    This is similar to link-window, except the window at src-window is moved to dst-window. With -r, all windows in the session are renumbered in sequential order, respecting the base-index option.


new-window [-adkP] [-c start-directory] [-F format] [-n window-name] [-t target-window] [shell-command]
    (alias: neww)
    Create a new window. With -a, the new window is inserted at the next index up from the specified target-window, moving windows up if necessary, otherwise target-window is the new window location.
    If -d is given, the session does not make the new window the current window. target-window represents the window to be created; if the target already exists an error is shown, unless the -k flag is used, in which case it is destroyed. shell-command is the command to execute. If shell-command is not specified, the value of the default-command option is used. -c specifies the working directory in which the new window is created.
    When the shell command completes, the window closes. See the remain-on-exit option to change this behaviour.
    The TERM environment variable must be set to ‘screen’ or ‘tmux’ for all programs running inside tmux. New windows will automatically have ‘TERM=screen’ added to their environment, but care must be taken not to reset this in shell start-up files.
    The -P option prints information about the new window after it has been created. By default, it uses the format ‘#{session_name}:#{window_index}’ but a different format may be specified with -F.


next-layout [-t target-window]
    (alias: nextl)
    Move a window to the next layout and rearrange the panes to fit.


next-window [-a] [-t target-session]
    (alias: next)
    Move to the next window in the session. If -a is used, move to the next window with an alert.


pipe-pane [-o] [-t target-pane] [shell-command]
    (alias: pipep)
    Pipe any output sent by the program in target-pane to a shell command. A pane may only be piped to one command at a time, any existing pipe is closed before shell-command is executed. The shell-command string may contain the special character sequences supported by the status-left option. If no shell-command is given, the current pipe (if any) is closed.
    The -o option only opens a new pipe if no previous pipe exists, allowing a pipe to be toggled with a single key, for example:

    bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'




previous-layout [-t target-window]
    (alias: prevl)
    Move to the previous layout in the session.


previous-window [-a] [-t target-session]
    (alias: prev)
    Move to the previous window in the session. With -a, move to the previous window with an alert.


rename-window [-t target-window] new-name
    (alias: renamew)
    Rename the current window, or the window at target-window if specified, to new-name.


resize-pane [-DLMRUZ] [-t target-pane] [-x width] [-y height] [adjustment]
    (alias: resizep)
    Resize a pane, up, down, left or right by adjustment with -U, -D, -L or -R, or to an absolute size with -x or -y. The adjustment is given in lines or cells (the default is 1).
    With -Z, the active pane is toggled between zoomed (occupying the whole of the window) and unzoomed (its normal position in the layout).
    -M begins mouse resizing (only valid if bound to a mouse key binding, see MOUSE SUPPORT).


respawn-pane [-c start-directory] [-k] [-t target-pane] [shell-command]
    (alias: respawnp)
    Reactivate a pane in which the command has exited (see the remain-on-exit window option). If shell-command is not given, the command used when the pane was created is executed. The pane must be already inactive, unless -k is given, in which case any existing command is killed. -c specifies a new working directory for the pane.


respawn-window [-c start-directory] [-k] [-t target-window] [shell-command]
    (alias: respawnw)
    Reactivate a window in which the command has exited (see the remain-on-exit window option). If shell-command is not given, the command used when the window was created is executed. The window must be already inactive, unless -k is given, in which case any existing command is killed. -c specifies a new working directory for the window.


rotate-window [-DU] [-t target-window]
    (alias: rotatew)
    Rotate the positions of the panes within a window, either upward (numerically lower) with -U or downward (numerically higher).


select-layout [-Enop] [-t target-pane] [layout-name]
    (alias: selectl)
    Choose a specific layout for a window. If layout-name is not given, the last preset layout used (if any) is reapplied. -n and -p are equivalent to the next-layout and previous-layout commands. -o applies the last set layout if possible (undoes the most recent layout change). -E spreads the current pane and any panes next to it out evenly.


select-pane [-DdegLlMmRU] [-P style] [-T title] [-t target-pane]
    (alias: selectp)
    Make pane target-pane the active pane in window target-window, or set its style (with -P). If one of -D, -L, -R, or -U is used, respectively the pane below, to the left, to the right, or above the target pane is used. -l is the same as using the last-pane command. -e enables or -d disables input to the pane.
    -m and -M are used to set and clear the marked pane. There is one marked pane at a time, setting a new marked pane clears the last. The marked pane is the default target for -s to join-pane, swap-pane and swap-window.
    Each pane has a style: by default the window-style and window-active-style options are used, select-pane -P sets the style for a single pane. For example, to set the pane 1 background to red:

    select-pane -t:.1 -P 'bg=red'


    -g shows the current pane style.
    -T sets the pane title.


select-window [-lnpT] [-t target-window]
    (alias: selectw)
    Select the window at target-window. -l, -n and -p are equivalent to the last-window, next-window and previous-window commands. If -T is given and the selected window is already the current window, the command behaves like last-window.


split-window [-bdfhvP] [-c start-directory] [-l size | -p percentage] [-t target-pane] [shell-command] [-F format]
    (alias: splitw)
    Create a new pane by splitting target-pane: -h does a horizontal split and -v a vertical split; if neither is specified, -v is assumed. The -l and -p options specify the size of the new pane in lines (for vertical split) or in cells (for horizontal split), or as a percentage, respectively. The -b option causes the new pane to be created to the left of or above target-pane. The -f option creates a new pane spanning the full window height (with -h) or full window width (with -v), instead of splitting the active pane. All other options have the same meaning as for the new-window command.


swap-pane [-dDU] [-s src-pane] [-t dst-pane]
    (alias: swapp)
    Swap two panes. If -U is used and no source pane is specified with -s, dst-pane is swapped with the previous pane (before it numerically); -D swaps with the next pane (after it numerically). -d instructs tmux not to change the active pane.
    If -s is omitted and a marked pane is present (see select-pane -m), the marked pane is used rather than the current pane.


swap-window [-d] [-s src-window] [-t dst-window]
    (alias: swapw)
    This is similar to link-window, except the source and destination windows are swapped. It is an error if no window exists at src-window.
    Like swap-pane, if -s is omitted and a marked pane is present (see select-pane -m), the window containing the marked pane is used rather than the current window.


unlink-window [-k] [-t target-window]
    (alias: unlinkw)
    Unlink target-window. Unless -k is given, a window may be unlinked only if it is linked to multiple sessions - windows may not be linked to no sessions; if -k is specified and the window is linked to only one session, it is unlinked and destroyed.

KEY BINDINGS
tmux allows a command to be bound to most keys, with or without a prefix key. When specifying keys, most represent themselves (for example ‘A’ to ‘Z’). Ctrl keys may be prefixed with ‘C-’ or ‘^’, and Alt (meta) with ‘M-’. In addition, the following special key names are accepted: Up, Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 to F12, Home, IC (Insert), NPage/PageDown/PgDn, PPage/PageUp/PgUp, Space, and Tab. Note that to bind the ‘"’ or ‘'’ keys, quotation marks are necessary, for example:

bind-key '"' split-window
bind-key "'" new-window

Commands related to key bindings are as follows:



bind-key [-nr] [-T key-table] key command [arguments]
    (alias: bind)
    Bind key key to command. Keys are bound in a key table. By default (without -T), the key is bound in the prefix key table. This table is used for keys pressed after the prefix key (for example, by default ‘c’ is bound to new-window in the prefix table, so ‘C-b c’ creates a new window). The root table is used for keys pressed without the prefix key: binding ‘c’ to new-window in the root table (not recommended) means a plain ‘c’ will create a new window. -n is an alias for -T root. Keys may also be bound in custom key tables and the switch-client -T command used to switch to them from a key binding. The -r flag indicates this key may repeat, see the repeat-time option.
    To view the default bindings and possible commands, see the list-keys command.


list-keys [-T key-table]
    (alias: lsk)
    List all key bindings. Without -T all key tables are printed. With -T only key-table.


send-keys [-lMRX] [-N repeat-count] [-t target-pane] key ...
    (alias: send)
    Send a key or keys to a window. Each argument key is the name of the key (such as ‘C-a’ or ‘NPage’) to send; if the string is not recognised as a key, it is sent as a series of characters. The -l flag disables key name lookup and sends the keys literally. All arguments are sent sequentially from first to last. The -R flag causes the terminal state to be reset.
    -M passes through a mouse event (only valid if bound to a mouse key binding, see MOUSE SUPPORT).
    -X is used to send a command into copy mode - see the WINDOWS AND PANES section. -N specifies a repeat count.


send-prefix [-2] [-t target-pane]
    Send the prefix key, or with -2 the secondary prefix key, to a window as if it was pressed.


unbind-key [-an] [-T key-table] key
    (alias: unbind)
    Unbind the command bound to key. -n and -T are the same as for bind-key. If -a is present, all key bindings are removed.

OPTIONS
The appearance and behaviour of tmux may be modified by changing the value of various options. There are three types of option: server options, session options and window options.
The tmux server has a set of global options which do not apply to any particular window or session. These are altered with the set-option -s command, or displayed with the show-options -s command.
In addition, each individual session may have a set of session options, and there is a separate set of global session options. Sessions which do not have a particular option configured inherit the value from the global session options. Session options are set or unset with the set-option command and may be listed with the show-options command. The available server and session options are listed under the set-option command.
Similarly, a set of window options is attached to each window, and there is a set of global window options from which any unset options are inherited. Window options are altered with the set-window-option command and can be listed with the show-window-options command. All window options are documented with the set-window-option command.
tmux also supports user options which are prefixed with a ‘@’. User options may have any name, so long as they are prefixed with ‘@’, and be set to any string. For example:

$ tmux setw -q @foo "abc123"
$ tmux showw -v @foo
abc123

Commands which set options are as follows:



set-option [-aFgoqsuw] [-t target-session | target-window] option value
    (alias: set)
    Set a window option with -w (equivalent to the set-window-option command), a server option with -s, otherwise a session option. If -g is given, the global session or window option is set. -F expands formats in the option value. The -u flag unsets an option, so a session inherits the option from the global options (or with -g, restores a global option to the default).
    The -o flag prevents setting an option that is already set and the -q flag suppresses errors about unknown or ambiguous options.
    With -a, and if the option expects a string or a style, value is appended to the existing setting. For example:

    set -g status-left "foo"
    set -ag status-left "bar"


    Will result in ‘foobar’. And:

    set -g status-style "bg=red"
    set -ag status-style "fg=blue"


    Will result in a red background and blue foreground. Without -a, the result would be the default background and a blue foreground.
    Available window options are listed under set-window-option.
    value depends on the option and may be a number, a string, or a flag (on, off, or omitted to toggle).
    Available server options are:



    buffer-limit number
        Set the number of buffers; as new buffers are added to the top of the stack, old ones are removed from the bottom if necessary to maintain this maximum length.


    command-alias[] name=value
        This is an array of custom aliases for commands. If an unknown command matches name, it is replaced with value. For example, after:
        set -s command-alias[100] zoom='resize-pane -Z'
        Using:
        zoom -t:.1
        Is equivalent to:
        resize-pane -Z -t:.1
        Note that aliases are expanded when a command is parsed rather than when it is executed, so binding an alias with bind-key will bind the expanded form.


    default-terminal terminal
        Set the default terminal for new windows created in this session - the default value of the TERM environment variable. For tmux to work correctly, this must be set to ‘screen’, ‘tmux’ or a derivative of them.


    escape-time time
        Set the time in milliseconds for which tmux waits after an escape is input to determine if it is part of a function or meta key sequences. The default is 500 milliseconds.


    exit-unattached [on | off]
        If enabled, the server will exit when there are no attached clients.


    focus-events [on | off]
        When enabled, focus events are requested from the terminal if supported and passed through to applications running in tmux. Attached clients should be detached and attached again after changing this option.


    history-file path
        If not empty, a file to which tmux will write command prompt history on exit and load it from on start.


    message-limit number
        Set the number of error or information messages to save in the message log for each client. The default is 100.


    set-clipboard [on | external | off]
        Attempt to set the terminal clipboard content using the xterm(1) escape sequence, if there is an Ms entry in the terminfo(5) description (see the TERMINFO EXTENSIONS section).
        If set to on, tmux will both accept the escape sequence to create a buffer and attempt to set the terminal clipboard. If set to external, tmux will attempt to set the terminal clipboard but ignore attempts by applications to set tmux buffers. If off, tmux will neither accept the clipboard escape sequence nor attempt to set the clipboard.
        Note that this feature needs to be enabled in xterm(1) by setting the resource:

        disallowedWindowOps: 20,21,SetXprop


        Or changing this property from the xterm(1) interactive menu when required.


    terminal-overrides[] string
        Allow terminal descriptions read using terminfo(5) to be overridden. Each entry is a colon-separated string made up of a terminal type pattern (matched using fnmatch(3)) and a set of name=value entries.
        For example, to set the ‘clear’ terminfo(5) entry to ‘\e[H\e[2J’ for all terminal types matching ‘rxvt*’:
        rxvt*:clear=\e[H\e[2J
        The terminal entry value is passed through strunvis(3) before interpretation.

    Available session options are:



    activity-action [any | none | current | other]
        Set action on window activity when monitor-activity is on. any means activity in any window linked to a session causes a bell or message (depending on visual-activity) in the current window of that session, none means all activity is ignored (equivalent to monitor-activity being off), current means only activity in windows other than the current window are ignored and other means activity in the current window is ignored but not those in other windows.


    assume-paste-time milliseconds
        If keys are entered faster than one in milliseconds, they are assumed to have been pasted rather than typed and tmux key bindings are not processed. The default is one millisecond and zero disables.


    base-index index
        Set the base index from which an unused index should be searched when a new window is created. The default is zero.


    bell-action [any | none | current | other]
        Set action on a bell in a window when monitor-bell is on. The values are the same as those for activity-action.


    default-command shell-command
        Set the command used for new windows (if not specified when the window is created) to shell-command, which may be any sh(1) command. The default is an empty string, which instructs tmux to create a login shell using the value of the default-shell option.


    default-shell path
        Specify the default shell. This is used as the login shell for new windows when the default-command option is set to empty, and must be the full path of the executable. When started tmux tries to set a default value from the first suitable of the SHELL environment variable, the shell returned by getpwuid(3), or /bin/sh. This option should be configured when tmux is used as a login shell.


    destroy-unattached [on | off]
        If enabled and the session is no longer attached to any clients, it is destroyed.


    detach-on-destroy [on | off]
        If on (the default), the client is detached when the session it is attached to is destroyed. If off, the client is switched to the most recently active of the remaining sessions.


    display-panes-active-colour colour
        Set the colour used by the display-panes command to show the indicator for the active pane.


    display-panes-colour colour
        Set the colour used by the display-panes command to show the indicators for inactive panes.


    display-panes-time time
        Set the time in milliseconds for which the indicators shown by the display-panes command appear.


    display-time time
        Set the amount of time for which status line messages and other on-screen indicators are displayed. If set to 0, messages and indicators are displayed until a key is pressed. time is in milliseconds.


    history-limit lines
        Set the maximum number of lines held in window history. This setting applies only to new windows - existing window histories are not resized and retain the limit at the point they were created.


    key-table key-table
        Set the default key table to key-table instead of root.


    lock-after-time number
        Lock the session (like the lock-session command) after number seconds of inactivity. The default is not to lock (set to 0).


    lock-command shell-command
        Command to run when locking each client. The default is to run lock(1) with -np.


    message-command-style style
        Set status line message command style, where style is a comma-separated list of characteristics to be specified.
        These may be ‘bg=colour’ to set the background colour, ‘fg=colour’ to set the foreground colour, and a list of attributes as specified below.
        The colour is one of: black, red, green, yellow, blue, magenta, cyan, white, aixterm bright variants (if supported: brightred, brightgreen, and so on), colour0 to colour255 from the 256-colour set, default, or a hexadecimal RGB string such as ‘#ffffff’, which chooses the closest match from the default 256-colour set.
        The attributes is either none or a comma-delimited list of one or more of: bright (or bold), dim, underscore, blink, reverse, hidden, italics, or strikethrough to turn an attribute on, or an attribute prefixed with ‘no’ to turn one off.
        Examples are:

        fg=yellow,bold,underscore,blink
        bg=black,fg=default,noreverse


        With the -a flag to the set-option command the new style is added otherwise the existing style is replaced.


    message-style style
        Set status line message style. For how to specify style, see the message-command-style option.


    mouse [on | off]
        If on, tmux captures the mouse and allows mouse events to be bound as key bindings. See the MOUSE SUPPORT section for details.


    prefix key
        Set the key accepted as a prefix key. In addition to the standard keys described under KEY BINDINGS, prefix can be set to the special key ‘None’ to set no prefix.


    prefix2 key
        Set a secondary key accepted as a prefix key. Like prefix, prefix2 can be set to ‘None’.


    renumber-windows [on | off]
        If on, when a window is closed in a session, automatically renumber the other windows in numerical order. This respects the base-index option if it has been set. If off, do not renumber the windows.


    repeat-time time
        Allow multiple commands to be entered without pressing the prefix-key again in the specified time milliseconds (the default is 500). Whether a key repeats may be set when it is bound using the -r flag to bind-key. Repeat is enabled for the default keys bound to the resize-pane command.


    set-titles [on | off]
        Attempt to set the client terminal title using the tsl and fsl terminfo(5) entries if they exist. tmux automatically sets these to the \e]0;...\007 sequence if the terminal appears to be xterm(1). This option is off by default.


    set-titles-string string
        String used to set the window title if set-titles is on. Formats are expanded, see the FORMATS section.


    silence-action [any | none | current | other]
        Set action on window silence when monitor-silence is on. The values are the same as those for activity-action.


    status [on | off]
        Show or hide the status line.


    status-interval interval
        Update the status line every interval seconds. By default, updates will occur every 15 seconds. A setting of zero disables redrawing at interval.


    status-justify [left | centre | right]
        Set the position of the window list component of the status line: left, centre or right justified.


    status-keys [vi | emacs]
        Use vi or emacs-style key bindings in the status line, for example at the command prompt. The default is emacs, unless the VISUAL or EDITOR environment variables are set and contain the string ‘vi’.


    status-left string
        Display string (by default the session name) to the left of the status line. string will be passed through strftime(3) and formats (see FORMATS) will be expanded. It may also contain the special character sequence #[] to change the colour or attributes, for example ‘#[fg=red,bright]’ to set a bright red foreground. See the message-command-style option for a description of colours and attributes.
        For details on how the names and titles can be set see the NAMES AND TITLES section.
        Examples are:

        #(sysctl vm.loadavg)
        #[fg=yellow,bold]#(apm -l)%%#[default] [#S]


        The default is ‘[#S] ’.


    status-left-length length
        Set the maximum length of the left component of the status line. The default is 10.


    status-left-style style
        Set the style of the left part of the status line. For how to specify style, see the message-command-style option.


    status-position [top | bottom]
        Set the position of the status line.


    status-right string
        Display string to the right of the status line. By default, the current pane title in double quotes, the date and the time are shown. As with status-left, string will be passed to strftime(3) and character pairs are replaced.


    status-right-length length
        Set the maximum length of the right component of the status line. The default is 40.


    status-right-style style
        Set the style of the right part of the status line. For how to specify style, see the message-command-style option.


    status-style style
        Set status line style. For how to specify style, see the message-command-style option.


    update-environment[] variable
        Set list of environment variables to be copied into the session environment when a new session is created or an existing session is attached. Any variables that do not exist in the source environment are set to be removed from the session environment (as if -r was given to the set-environment command).


    user-keys[] key
        Set list of user-defined key escape sequences. Each item is associated with a key named ‘User0’, ‘User1’, and so on.
        For example:

        set -s user-keys[0] "\e[5;30012~"
        bind User0 resize-pane -L 3




    visual-activity [on | off | both]
        If on, display a message instead of sending a bell when activity occurs in a window for which the monitor-activity window option is enabled. If set to both, a bell and a message are produced.


    visual-bell [on | off | both]
        If on, a message is shown on a bell in a window for which the monitor-bell window option is enabled instead of it being passed through to the terminal (which normally makes a sound). If set to both, a bell and a message are produced. Also see the bell-action option.


    visual-silence [on | off | both]
        If monitor-silence is enabled, prints a message after the interval has expired on a given window instead of sending a bell. If set to both, a bell and a message are produced.


    word-separators string
        Sets the session's conception of what characters are considered word separators, for the purposes of the next and previous word commands in copy mode. The default is ‘ -_@’.



set-window-option [-aFgoqu] [-t target-window] option value
    (alias: setw)
    Set a window option. The -a, -F, -g, -o, -q and -u flags work similarly to the set-option command.
    Supported window options are:

    aggressive-resize [on | off]
        Aggressively resize the chosen window. This means that tmux will resize the window to the size of the smallest session for which it is the current window, rather than the smallest session to which it is attached. The window may resize when the current window is changed on another sessions; this option is good for full-screen programs which support SIGWINCH and poor for interactive programs such as shells.
    allow-rename [on | off]
        Allow programs to change the window name using a terminal escape sequence (\ek...\e\\). The default is off.
    alternate-screen [on | off]
        This option configures whether programs running inside tmux may use the terminal alternate screen feature, which allows the smcup and rmcup terminfo(5) capabilities. The alternate screen feature preserves the contents of the window when an interactive application starts and restores it on exit, so that any output visible before the application starts reappears unchanged after it exits. The default is on.
    automatic-rename [on | off]
        Control automatic window renaming. When this setting is enabled, tmux will rename the window automatically using the format specified by automatic-rename-format. This flag is automatically disabled for an individual window when a name is specified at creation with new-window or new-session, or later with rename-window, or with a terminal escape sequence. It may be switched off globally with:

        set-window-option -g automatic-rename off


    automatic-rename-format format
        The format (see FORMATS) used when the automatic-rename option is enabled.
    clock-mode-colour colour
        Set clock colour.
    clock-mode-style [12 | 24]
        Set clock hour format.
    force-height height

    force-width width
        Prevent tmux from resizing a window to greater than width or height. A value of zero restores the default unlimited setting.
    main-pane-height height

    main-pane-width width
        Set the width or height of the main (left or top) pane in the main-horizontal or main-vertical layouts.
    mode-keys [vi | emacs]
        Use vi or emacs-style key bindings in copy mode. The default is emacs, unless VISUAL or EDITOR contains ‘vi’.
    mode-style style
        Set window modes style. For how to specify style, see the message-command-style option.
    monitor-activity [on | off]
        Monitor for activity in the window. Windows with activity are highlighted in the status line.
    monitor-bell [on | off]
        Monitor for a bell in the window. Windows with a bell are highlighted in the status line.
    monitor-silence [interval]
        Monitor for silence (no activity) in the window within interval seconds. Windows that have been silent for the interval are highlighted in the status line. An interval of zero disables the monitoring.
    other-pane-height height
        Set the height of the other panes (not the main pane) in the main-horizontal layout. If this option is set to 0 (the default), it will have no effect. If both the main-pane-height and other-pane-height options are set, the main pane will grow taller to make the other panes the specified height, but will never shrink to do so.
    other-pane-width width
        Like other-pane-height, but set the width of other panes in the main-vertical layout.
    pane-active-border-style style
        Set the pane border style for the currently active pane. For how to specify style, see the message-command-style option. Attributes are ignored.
    pane-base-index index
        Like base-index, but set the starting index for pane numbers.
    pane-border-format format
        Set the text shown in pane border status lines.
    pane-border-status [off | top | bottom]
        Turn pane border status lines off or set their position.
    pane-border-style style
        Set the pane border style for panes aside from the active pane. For how to specify style, see the message-command-style option. Attributes are ignored.
    remain-on-exit [on | off]
        A window with this flag set is not destroyed when the program running in it exits. The window may be reactivated with the respawn-window command.
    synchronize-panes [on | off]
        Duplicate input to any pane to all other panes in the same window (only for panes that are not in any special mode).
    window-active-style style
        Set the style for the window's active pane. For how to specify style, see the message-command-style option.
    window-status-activity-style style
        Set status line style for windows with an activity alert. For how to specify style, see the message-command-style option.
    window-status-bell-style style
        Set status line style for windows with a bell alert. For how to specify style, see the message-command-style option.
    window-status-current-format string
        Like window-status-format, but is the format used when the window is the current window.
    window-status-current-style style
        Set status line style for the currently active window. For how to specify style, see the message-command-style option.
    window-status-format string
        Set the format in which the window is displayed in the status line window list. See the status-left option for details of special character sequences available. The default is ‘#I:#W#F’.
    window-status-last-style style
        Set status line style for the last active window. For how to specify style, see the message-command-style option.
    window-status-separator string
        Sets the separator drawn between windows in the status line. The default is a single space character.
    window-status-style style
        Set status line style for a single window. For how to specify style, see the message-command-style option.
    window-style style
        Set the default window style. For how to specify style, see the message-command-style option.
    wrap-search [on | off]
        If this option is set, searches will wrap around the end of the pane contents. The default is on.
    xterm-keys [on | off]
        If this option is set, tmux will generate xterm(1) -style function key sequences; these have a number included to indicate modifiers such as Shift, Alt or Ctrl.



show-options [-gqsvw] [-t target-session | target-window] [option]
    (alias: show)
    Show the window options (or a single window option if given) with -w (equivalent to show-window-options), the server options with -s, otherwise the session options for target session. Global session or window options are listed if -g is used. -v shows only the option value, not the name. If -q is set, no error will be returned if option is unset.


show-window-options [-gv] [-t target-window] [option]
    (alias: showw)
    List the window options or a single option for target-window, or the global window options if -g is used. -v shows only the option value, not the name.

HOOKS
tmux allows commands to run on various triggers, called hooks. Most tmux commands have an after hook and there are a number of hooks not associated with commands.
A command's after hook is run after it completes, except when the command is run as part of a hook itself. They are named with an ‘after-’ prefix. For example, the following command adds a hook to select the even-vertical layout after every split-window:

set-hook after-split-window "selectl even-vertical"

All the notifications listed in the CONTROL MODE section are hooks (without any arguments), except %exit. The following additional hooks are available:



alert-activity
    Run when a window has activity. See monitor-activity.


alert-bell
    Run when a window has received a bell. See monitor-bell.


alert-silence
    Run when a window has been silent. See monitor-silence.


client-attached
    Run when a client is attached.


client-detached
    Run when a client is detached


client-resized
    Run when a client is resized.


client-session-changed
    Run when a client's attached session is changed.


pane-died
    Run when the program running in a pane exits, but remain-on-exit is on so the pane has not closed.


pane-exited
    Run when the program running in a pane exits.


pane-set-clipboard
    Run when the terminal clipboard is set using the xterm(1) escape sequence.


session-created
    Run when a new session created.


session-closed
    Run when a session closed.


session-renamed
    Run when a session is renamed.


window-linked
    Run when a window is linked into a session.


window-renamed
    Run when a window is renamed.


window-unlinked
    Run when a window is unlinked from a session.

Hooks are managed with these commands:



set-hook [-gu] [-t target-session] hook-name command
    Sets (or with -u unsets) hook hook-name to command. If -g is given, hook-name is added to the global list of hooks, otherwise it is added to the session hooks (for target-session with -t). Like options, session hooks inherit from the global ones.


show-hooks [-g] [-t target-session]
    Shows the global list of hooks with -g, otherwise the session hooks.

MOUSE SUPPORT
If the mouse option is on (the default is off), tmux allows mouse events to be bound as keys. The name of each key is made up of a mouse event (such as ‘MouseUp1’) and a location suffix (one of ‘Pane’ for the contents of a pane, ‘Border’ for a pane border or ‘Status’ for the status line). The following mouse events are available:
WheelUp 	WheelDown
MouseDown1 	MouseUp1 	MouseDrag1 	MouseDragEnd1
MouseDown2 	MouseUp2 	MouseDrag2 	MouseDragEnd2
MouseDown3 	MouseUp3 	MouseDrag3 	MouseDragEnd3
DoubleClick1 	DoubleClick2 	DoubleClick3 	WheelUp
TripleClick1 	TripleClick2 	TripleClick3 	WheelDown
Each should be suffixed with a location, for example ‘MouseDown1Status’.
The special token ‘{mouse}’ or ‘=’ may be used as target-window or target-pane in commands bound to mouse key bindings. It resolves to the window or pane over which the mouse event took place (for example, the window in the status line over which button 1 was released for a ‘MouseUp1Status’ binding, or the pane over which the wheel was scrolled for a ‘WheelDownPane’ binding).
The send-keys -M flag may be used to forward a mouse event to a pane.
The default key bindings allow the mouse to be used to select and resize panes, to copy text and to change window using the status line. These take effect if the mouse option is turned on.
FORMATS
Certain commands accept the -F flag with a format argument. This is a string which controls the output format of the command. Replacement variables are enclosed in ‘#{’ and ‘}’, for example ‘#{session_name}’. The possible variables are listed in the table below, or the name of a tmux option may be used for an option's value. Some variables have a shorter alias such as ‘#S’, and ‘##’ is replaced by a single ‘#’.
Conditionals are available by prefixing with ‘?’ and separating two alternatives with a comma; if the specified variable exists and is not zero, the first alternative is chosen, otherwise the second is used. For example ‘#{?session_attached,attached,not attached}’ will include the string ‘attached’ if the session is attached and the string ‘not attached’ if it is unattached, or ‘#{?automatic-rename,yes,no}’ will include ‘yes’ if automatic-rename is enabled, or ‘no’ if not.
Comparisons may be expressed by prefixing two comma-separated alternatives by ‘==’ or ‘!=’ and a colon. For example ‘#{==:#{host},myhost}’ will be replaced by ‘1’ if running on ‘myhost’, otherwise by ‘0’. An ‘m’ specifies an fnmatch(3) comparison where the first argument is the pattern and the second the string to compare, for example ‘#{m:*foo*,#{host}}’. ‘||’ and ‘&&’ evaluate to true if either or both of two comma-separated alternatives are true, for example ‘#{||,#{pane_in_mode},#{alternate_on}}’. A ‘C’ performs a search for an fnmatch(3) pattern in the pane content and evaluates to zero if not found, or a line number if found.
A limit may be placed on the length of the resultant string by prefixing it by an ‘=’, a number and a colon. Positive numbers count from the start of the string and negative from the end, so ‘#{=5:pane_title}’ will include at most the first 5 characters of the pane title, or ‘#{=-5:pane_title}’ the last 5 characters. Prefixing a time variable with ‘t:’ will convert it to a string, so if ‘#{window_activity}’ gives ‘1445765102’, ‘#{t:window_activity}’ gives ‘Sun Oct 25 09:25:02 2015’. The ‘b:’ and ‘d:’ prefixes are basename(3) and dirname(3) of the variable respectively. A prefix of the form ‘s/foo/bar/:’ will substitute ‘foo’ with ‘bar’ throughout.
In addition, the first line of a shell command's output may be inserted using ‘#()’. For example, ‘#(uptime)’ will insert the system's uptime. When constructing formats, tmux does not wait for ‘#()’ commands to finish; instead, the previous result from running the same command is used, or a placeholder if the command has not been run before. If the command hasn't exited, the most recent line of output will be used, but the status line will not be updated more than once a second. Commands are executed with the tmux global environment set (see the ENVIRONMENT section).
The following variables are available, where appropriate:
Variable name 	Alias 	Replaced with
alternate_on 		If pane is in alternate screen
alternate_saved_x 		Saved cursor X in alternate screen
alternate_saved_y 		Saved cursor Y in alternate screen
buffer_created 		Time buffer created
buffer_name 		Name of buffer
buffer_sample 		Sample of start of buffer
buffer_size 		Size of the specified buffer in bytes
client_activity 		Time client last had activity
client_created 		Time client created
client_control_mode 		1 if client is in control mode
client_discarded 		Bytes discarded when client behind
client_height 		Height of client
client_key_table 		Current key table
client_last_session 		Name of the client's last session
client_name 		Name of client
client_pid 		PID of client process
client_prefix 		1 if prefix key has been pressed
client_readonly 		1 if client is readonly
client_session 		Name of the client's session
client_termname 		Terminal name of client
client_termtype 		Terminal type of client
client_tty 		Pseudo terminal of client
client_utf8 		1 if client supports utf8
client_width 		Width of client
client_written 		Bytes written to client
command 		Name of command in use, if any
command_list_name 		Command name if listing commands
command_list_alias 		Command alias if listing commands
command_list_usage 		Command usage if listing commands
cursor_flag 		Pane cursor flag
cursor_x 		Cursor X position in pane
cursor_y 		Cursor Y position in pane
history_bytes 		Number of bytes in window history
history_limit 		Maximum window history lines
history_size 		Size of history in lines
hook 		Name of running hook, if any
hook_pane 		ID of pane where hook was run, if any
hook_session 		ID of session where hook was run, if any
hook_session_name 		Name of session where hook was run, if any
hook_window 		ID of window where hook was run, if any
hook_window_name 		Name of window where hook was run, if any
host 	#H 	Hostname of local host
host_short 	#h 	Hostname of local host (no domain name)
insert_flag 		Pane insert flag
keypad_cursor_flag 		Pane keypad cursor flag
keypad_flag 		Pane keypad flag
line 		Line number in the list
mouse_any_flag 		Pane mouse any flag
mouse_button_flag 		Pane mouse button flag
mouse_standard_flag 		Pane mouse standard flag
mouse_all_flag 		Pane mouse all flag
pane_active 		1 if active pane
pane_at_bottom 		1 if pane is at the bottom of window
pane_at_left 		1 if pane is at the left of window
pane_at_right 		1 if pane is at the right of window
pane_at_top 		1 if pane is at the top of window
pane_bottom 		Bottom of pane
pane_current_command 		Current command if available
pane_dead 		1 if pane is dead
pane_dead_status 		Exit status of process in dead pane
pane_format 		1 if format is for a pane (not assuming the current)
pane_height 		Height of pane
pane_id 	#D 	Unique pane ID
pane_in_mode 		If pane is in a mode
pane_input_off 		If input to pane is disabled
pane_index 	#P 	Index of pane
pane_left 		Left of pane
pane_mode 		Name of pane mode, if any.
pane_pid 		PID of first process in pane
pane_pipe 		1 if pane is being piped
pane_right 		Right of pane
pane_search_string 		Last search string in copy mode
pane_start_command 		Command pane started with
pane_synchronized 		If pane is synchronized
pane_tabs 		Pane tab positions
pane_title 	#T 	Title of pane
pane_top 		Top of pane
pane_tty 		Pseudo terminal of pane
pane_width 		Width of pane
pid 		Server PID
scroll_region_lower 		Bottom of scroll region in pane
scroll_region_upper 		Top of scroll region in pane
scroll_position 		Scroll position in copy mode
selection_present 		1 if selection started in copy mode
session_alerts 		List of window indexes with alerts
session_attached 		Number of clients session is attached to
session_activity 		Time of session last activity
session_created 		Time session created
session_format 		1 if format is for a session (not assuming the current)
session_last_attached 		Time session last attached
session_group 		Name of session group
session_group_size 		Size of session group
session_group_list 		List of sessions in group
session_grouped 		1 if session in a group
session_height 		Height of session
session_id 		Unique session ID
session_many_attached 		1 if multiple clients attached
session_name 	#S 	Name of session
session_stack 		Window indexes in most recent order
session_width 		Width of session
session_windows 		Number of windows in session
socket_path 		Server socket path
start_time 		Server start time
window_activity 		Time of window last activity
window_activity_flag 		1 if window has activity
window_active 		1 if window active
window_bell_flag 		1 if window has bell
window_flags 	#F 	Window flags
window_format 		1 if format is for a window (not assuming the current)
window_height 		Height of window
window_id 		Unique window ID
window_index 	#I 	Index of window
window_last_flag 		1 if window is the last used
window_layout 		Window layout description, ignoring zoomed window panes
window_linked 		1 if window is linked across sessions
window_name 	#W 	Name of window
window_panes 		Number of panes in window
window_silence_flag 		1 if window has silence alert
window_stack_index 		Index in session most recent stack
window_visible_layout 		Window layout description, respecting zoomed window panes
window_width 		Width of window
window_zoomed_flag 		1 if window is zoomed
wrap_flag 		Pane wrap flag
NAMES AND TITLES
tmux distinguishes between names and titles. Windows and sessions have names, which may be used to specify them in targets and are displayed in the status line and various lists: the name is the tmux identifier for a window or session. Only panes have titles. A pane's title is typically set by the program running inside the pane using an escape sequence (like it would set the xterm(1) window title in X(7)). Windows themselves do not have titles - a window's title is the title of its active pane. tmux itself may set the title of the terminal in which the client is running, see the set-titles option.
A session's name is set with the new-session and rename-session commands. A window's name is set with one of:

    A command argument (such as -n for new-window or new-session).
    An escape sequence:

    $ printf '\033kWINDOW_NAME\033\\'


    Automatic renaming, which sets the name to the active command in the window's active pane. See the automatic-rename option.

When a pane is first created, its title is the hostname. A pane's title can be set via the OSC title setting sequence, for example:

$ printf '\033]2;My Title\033\\'

It can also be modified with the select-pane -T command.
ENVIRONMENT
When the server is started, tmux copies the environment into the global environment; in addition, each session has a session environment. When a window is created, the session and global environments are merged. If a variable exists in both, the value from the session environment is used. The result is the initial environment passed to the new process.
The update-environment session option may be used to update the session environment from the client when a new session is created or an old reattached. tmux also initialises the TMUX variable with some internal information to allow commands to be executed from inside, and the TERM variable with the correct terminal setting of ‘screen’.
Commands to alter and view the environment are:



set-environment [-gru] [-t target-session] name [value]
    (alias: setenv)
    Set or unset an environment variable. If -g is used, the change is made in the global environment; otherwise, it is applied to the session environment for target-session. The -u flag unsets a variable. -r indicates the variable is to be removed from the environment before starting a new process.


show-environment [-gs] [-t target-session] [variable]
    (alias: showenv)
    Display the environment for target-session or the global environment with -g. If variable is omitted, all variables are shown. Variables removed from the environment are prefixed with ‘-’. If -s is used, the output is formatted as a set of Bourne shell commands.

STATUS LINE
tmux includes an optional status line which is displayed in the bottom line of each terminal. By default, the status line is enabled (it may be disabled with the status session option) and contains, from left-to-right: the name of the current session in square brackets; the window list; the title of the active pane in double quotes; and the time and date.
The status line is made of three parts: configurable left and right sections (which may contain dynamic content such as the time or output from a shell command, see the status-left, status-left-length, status-right, and status-right-length options below), and a central window list. By default, the window list shows the index, name and (if any) flag of the windows present in the current session in ascending numerical order. It may be customised with the window-status-format and window-status-current-format options. The flag is one of the following symbols appended to the window name:
Symbol 	Meaning
* 	Denotes the current window.
- 	Marks the last window (previously selected).
# 	Window activity is monitored and activity has been detected.
! 	Window bells are monitored and a bell has occurred in the window.
~ 	The window has been silent for the monitor-silence interval.
M 	The window contains the marked pane.
Z 	The window's active pane is zoomed.
The # symbol relates to the monitor-activity window option. The window name is printed in inverted colours if an alert (bell, activity or silence) is present.
The colour and attributes of the status line may be configured, the entire status line using the status-style session option and individual windows using the window-status-style window option.
The status line is automatically refreshed at interval if it has changed, the interval may be controlled with the status-interval session option.
Commands related to the status line are as follows:



command-prompt [-1i] [-I inputs] [-p prompts] [-t target-client] [template]
    Open the command prompt in a client. This may be used from inside tmux to execute commands interactively.
    If template is specified, it is used as the command. If present, -I is a comma-separated list of the initial text for each prompt. If -p is given, prompts is a comma-separated list of prompts which are displayed in order; otherwise a single prompt is displayed, constructed from template if it is present, or ‘:’ if not.
    Before the command is executed, the first occurrence of the string ‘%%’ and all occurrences of ‘%1’ are replaced by the response to the first prompt, all ‘%2’ are replaced with the response to the second prompt, and so on for further prompts. Up to nine prompt responses may be replaced (‘%1’ to ‘%9’). ‘%%%’ is like ‘%%’ but any quotation marks are escaped.
    -1 makes the prompt only accept one key press, in this case the resulting input is a single character. -i executes the command every time the prompt input changes instead of when the user exits the command prompt.
    The following keys have a special meaning in the command prompt, depending on the value of the status-keys option:
    Function 	vi 	emacs
    Cancel command prompt 	Escape 	Escape
    Delete current word 		C-w
    Delete entire command 	d 	C-u
    Delete from cursor to end 	D 	C-k
    Execute command 	Enter 	Enter
    Get next command from history 		Down
    Get previous command from history 		Up
    Insert top paste buffer 	p 	C-y
    Look for completions 	Tab 	Tab
    Move cursor left 	h 	Left
    Move cursor right 	l 	Right
    Move cursor to end 	$ 	C-e
    Move cursor to next word 	w 	M-f
    Move cursor to previous word 	b 	M-b
    Move cursor to start 	0 	C-a
    Transpose characters 		C-t


confirm-before [-p prompt] [-t target-client] command
    (alias: confirm)
    Ask for confirmation before executing command. If -p is given, prompt is the prompt to display; otherwise a prompt is constructed from command. It may contain the special character sequences supported by the status-left option.
    This command works only from inside tmux.


display-message [-p] [-c target-client] [-t target-pane] [message]
    (alias: display)
    Display a message. If -p is given, the output is printed to stdout, otherwise it is displayed in the target-client status line. The format of message is described in the FORMATS section; information is taken from target-pane if -t is given, otherwise the active pane for the session attached to target-client.

BUFFERS
tmux maintains a set of named paste buffers. Each buffer may be either explicitly or automatically named. Explicitly named buffers are named when created with the set-buffer or load-buffer commands, or by renaming an automatically named buffer with set-buffer -n. Automatically named buffers are given a name such as ‘buffer0001’, ‘buffer0002’ and so on. When the buffer-limit option is reached, the oldest automatically named buffer is deleted. Explicitly named buffers are not subject to buffer-limit and may be deleted with delete-buffer command.
Buffers may be added using copy-mode or the set-buffer and load-buffer commands, and pasted into a window using the paste-buffer command. If a buffer command is used and no buffer is specified, the most recently added automatically named buffer is assumed.
A configurable history buffer is also maintained for each window. By default, up to 2000 lines are kept; this can be altered with the history-limit option (see the set-option command above).
The buffer commands are as follows:



choose-buffer [-N] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template]
    Put a pane into buffer mode, where a buffer may be chosen interactively from a list. The following keys may be used in buffer mode:
    Key 	Function
    Enter 	Paste selected buffer
    Up 	Select previous buffer
    Down 	Select next buffer
    C-s 	Search by name or content
    n 	Repeat last search
    t 	Toggle if buffer is tagged
    T 	Tag no buffers
    C-t 	Tag all buffers
    p 	Paste selected buffer
    P 	Paste tagged buffers
    d 	Delete selected buffer
    D 	Delete tagged buffers
    f 	Enter a format to filter items
    O 	Change sort order
    v 	Toggle preview
    q 	Exit mode
    After a buffer is chosen, ‘%%’ is replaced by the buffer name in template and the result executed as a command. If template is not given, "paste-buffer -b '%%'" is used.
    -O specifies the initial sort order: one of ‘time’, ‘name’ or ‘size’. -f specifies an initial filter: the filter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown. If a filter would lead to an empty list, it is ignored. -F specifies the format for each item in the list. -N starts without the preview. This command works only if at least one client is attached.


clear-history [-t target-pane]
    (alias: clearhist)
    Remove and free the history for the specified pane.


delete-buffer [-b buffer-name]
    (alias: deleteb)
    Delete the buffer named buffer-name, or the most recently added automatically named buffer if not specified.


list-buffers [-F format]
    (alias: lsb)
    List the global buffers. For the meaning of the -F flag, see the FORMATS section.


load-buffer [-b buffer-name] path
    (alias: loadb)
    Load the contents of the specified paste buffer from path.


paste-buffer [-dpr] [-b buffer-name] [-s separator] [-t target-pane]
    (alias: pasteb)
    Insert the contents of a paste buffer into the specified pane. If not specified, paste into the current one. With -d, also delete the paste buffer. When output, any linefeed (LF) characters in the paste buffer are replaced with a separator, by default carriage return (CR). A custom separator may be specified using the -s flag. The -r flag means to do no replacement (equivalent to a separator of LF). If -p is specified, paste bracket control codes are inserted around the buffer if the application has requested bracketed paste mode.


save-buffer [-a] [-b buffer-name] path
    (alias: saveb)
    Save the contents of the specified paste buffer to path. The -a option appends to rather than overwriting the file.


set-buffer [-a] [-b buffer-name] [-n new-buffer-name] data
    (alias: setb)
    Set the contents of the specified buffer to data. The -a option appends to rather than overwriting the buffer. The -n option renames the buffer to new-buffer-name.


show-buffer [-b buffer-name]
    (alias: showb)
    Display the contents of the specified buffer.

MISCELLANEOUS
Miscellaneous commands are as follows:



clock-mode [-t target-pane]
    Display a large clock.


if-shell [-bF] [-t target-pane] shell-command command [command]
    (alias: if)
    Execute the first command if shell-command returns success or the second command otherwise. Before being executed, shell-command is expanded using the rules specified in the FORMATS section, including those relevant to target-pane. With -b, shell-command is run in the background.
    If -F is given, shell-command is not executed but considered success if neither empty nor zero (after formats are expanded).


lock-server
    (alias: lock)
    Lock each client individually by running the command specified by the lock-command option.


run-shell [-b] [-t target-pane] shell-command
    (alias: run)
    Execute shell-command in the background without creating a window. Before being executed, shell-command is expanded using the rules specified in the FORMATS section. With -b, the command is run in the background. After it finishes, any output to stdout is displayed in copy mode (in the pane specified by -t or the current pane if omitted). If the command doesn't return success, the exit status is also displayed.


wait-for [-L | -S | -U] channel
    (alias: wait)
    When used without options, prevents the client from exiting until woken using wait-for -S with the same channel. When -L is used, the channel is locked and any clients that try to lock the same channel are made to wait until the channel is unlocked with wait-for -U. This command only works from outside tmux.

TERMINFO EXTENSIONS
tmux understands some unofficial extensions to terminfo(5):



Cs, Cr
    Set the cursor colour. The first takes a single string argument and is used to set the colour; the second takes no arguments and restores the default cursor colour. If set, a sequence such as this may be used to change the cursor colour from inside tmux:

    $ printf '\033]12;red\033\\'




Ss, Se
    Set or reset the cursor style. If set, a sequence such as this may be used to change the cursor to an underline:

    $ printf '\033[4 q'


    If Se is not set, Ss with argument 0 will be used to reset the cursor style instead.


Tc
    Indicate that the terminal supports the ‘direct colour’ RGB escape sequence (for example, \e[38;2;255;255;255m).
    If supported, this is used for the OSC initialize colour escape sequence (which may be enabled by adding the ‘initc’ and ‘ccc’ capabilities to the tmux terminfo(5) entry).


Ms
    Store the current buffer in the host terminal's selection (clipboard). See the set-clipboard option above and the xterm(1) man page.

CONTROL MODE
tmux offers a textual interface called control mode. This allows applications to communicate with tmux using a simple text-only protocol.
In control mode, a client sends tmux commands or command sequences terminated by newlines on standard input. Each command will produce one block of output on standard output. An output block consists of a %begin line followed by the output (which may be empty). The output block ends with a %end or %error. %begin and matching %end or %error have two arguments: an integer time (as seconds from epoch) and command number. For example:

%begin 1363006971 2
0: ksh* (1 panes) [80x24] [layout b25f,80x24,0,0,2] @2 (active)
%end 1363006971 2

The refresh-client -C command may be used to set the size of a client in control mode.
In control mode, tmux outputs notifications. A notification will never occur inside an output block.
The following notifications are defined:



%client-session-changed client session-id name
    The client is now attached to the session with ID session-id, which is named name.


%exit [reason]
    The tmux client is exiting immediately, either because it is not attached to any session or an error occurred. If present, reason describes why the client exited.


%layout-change window-id window-layout window-visible-layout window-flags
    The layout of a window with ID window-id changed. The new layout is window-layout. The window's visible layout is window-visible-layout and the window flags are window-flags.


%output pane-id value
    A window pane produced output. value escapes non-printable characters and backslash as octal \xxx.


%pane-mode-changed pane-id
    The pane with ID pane-id has changed mode.


%session-changed session-id name
    The client is now attached to the session with ID session-id, which is named name.


%session-renamed name
    The current session was renamed to name.


%session-window-changed session-id window-id
    The session with ID session-id changed its active window to the window with ID window-id.


%sessions-changed
    A session was created or destroyed.


%unlinked-window-add window-id
    The window with ID window-id was created but is not linked to the current session.


%window-add window-id
    The window with ID window-id was linked to the current session.


%window-close window-id
    The window with ID window-id closed.


%window-pane-changed window-id pane-id
    The active pane in the window with ID window-id changed to the pane with ID pane-id.


%window-renamed window-id name
    The window with ID window-id was renamed to name.

FILES

~/.tmux.conf
    Default tmux configuration file.
/etc/tmux.conf
    System-wide configuration file.

EXAMPLES
To create a new tmux session running vi(1):
$ tmux new-session vi
Most commands have a shorter form, known as an alias. For new-session, this is new:
$ tmux new vi
Alternatively, the shortest unambiguous form of a command is accepted. If there are several options, they are listed:

$ tmux n
ambiguous command: n, could be: new-session, new-window, next-window

Within an active session, a new window may be created by typing ‘C-b c’ (Ctrl followed by the ‘b’ key followed by the ‘c’ key).
Windows may be navigated with: ‘C-b 0’ (to select window 0), ‘C-b 1’ (to select window 1), and so on; ‘C-b n’ to select the next window; and ‘C-b p’ to select the previous window.
A session may be detached using ‘C-b d’ (or by an external event such as ssh(1) disconnection) and reattached with:
$ tmux attach-session
Typing ‘C-b ?’ lists the current key bindings in the current window; up and down may be used to navigate the list or ‘q’ to exit from it.
Commands to be run when the tmux server is started may be placed in the ~/.tmux.conf configuration file. Common examples include:
Changing the default prefix key:

set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

Turning the status line off, or changing its colour:

set-option -g status off
set-option -g status-style bg=blue

Setting other options, such as the default command, or locking after 30 minutes of inactivity:

set-option -g default-command "exec /bin/ksh"
set-option -g lock-after-time 1800

Creating new key bindings:

bind-key b set-option status
bind-key / command-prompt "split-window 'exec man %%'"
bind-key S command-prompt "new-window -n %1 'ssh %1'"


https://leanpub.com/the-tao-of-tmux/read#leanpub-auto-its-all-commands


